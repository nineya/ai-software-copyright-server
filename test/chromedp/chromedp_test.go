package test

import (
	"ai-software-copyright-server/internal/global"
	"ai-software-copyright-server/internal/initialize"
	"context"
	"encoding/base64"
	"github.com/chromedp/cdproto/emulation"
	"github.com/chromedp/cdproto/page"
	"io/ioutil"
	"log"
	"math"
	"os"
	"testing"
	"time"

	"github.com/chromedp/chromedp"
)

func TestContainer(t *testing.T) {
	initialize.InitSystemConfig()
	t.Run("HTMLToScreenshot", HTMLToScreenshot)
	//t.Run("BookFile", BookFile)
	//t.Run("CodeFile", CodeFile)
	//t.Run("CodeTemplate", CodeTemplate)
}

func HTMLToScreenshot(t *testing.T) {
	htmlContent := "\n\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n    <title>网盘拉新达人助手 - 链接有效性监控</title>\n    <style>\n        /* 全局样式 */\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n            margin: 0;\n            padding: 0;\n            background-color: #f0f2f5; /* 浅灰色背景 */\n            color: #333;\n            -webkit-font-smoothing: antialiased;\n            -moz-osx-font-smoothing: grayscale;\n            overflow-x: hidden; /* 防止水平滚动 */\n        }\n\n        /* 移动端容器 */\n        .container {\n            max-width: 500px; /* 限制内容宽度，模拟手机屏幕 */\n            margin: 0 auto;\n            padding: 15px;\n            box-sizing: border-box;\n            background-color: #fff; /* 主内容区白色背景 */\n            min-height: 100vh; /* 确保背景覆盖整个屏幕 */\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.05); /* 轻微阴影 */\n        }\n\n        /* 头部导航 */\n        .header {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            padding: 15px 0;\n            margin-bottom: 20px;\n            position: relative;\n            background: linear-gradient(to right, #6a11cb 0%, #2575fc 100%); /* 渐变背景 */\n            color: #fff;\n            border-radius: 10px;\n            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\n        }\n\n        .header h1 {\n            font-size: 22px;\n            margin: 0;\n            font-weight: 600;\n        }\n\n        /* 卡片风格 */\n        .card {\n            background-color: #fff;\n            border-radius: 12px;\n            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);\n            margin-bottom: 20px;\n            padding: 20px;\n            transition: all 0.3s ease;\n        }\n\n        .card:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.12);\n        }\n\n        .card-title {\n            font-size: 18px;\n            font-weight: 600;\n            color: #333;\n            margin-bottom: 15px;\n            border-bottom: 2px solid #f0f2f5;\n            padding-bottom: 10px;\n        }\n\n        /* 表单元素 */\n        .form-group {\n            margin-bottom: 15px;\n        }\n\n        label {\n            display: block;\n            margin-bottom: 8px;\n            font-size: 14px;\n            color: #555;\n            font-weight: 500;\n        }\n\n        textarea, input[type=\"text\"] {\n            width: calc(100% - 24px); /* 减去padding */\n            padding: 12px;\n            border: 1px solid #ddd;\n            border-radius: 8px;\n            font-size: 15px;\n            box-sizing: border-box;\n            transition: border-color 0.3s ease;\n            resize: vertical; /* 允许垂直调整大小 */\n            min-height: 40px;\n        }\n\n        textarea:focus, input[type=\"text\"]:focus {\n            border-color: #2575fc;\n            outline: none;\n            box-shadow: 0 0 0 3px rgba(37, 117, 252, 0.2);\n        }\n\n        /* 按钮 */\n        .btn {\n            display: inline-block;\n            padding: 12px 20px;\n            border-radius: 8px;\n            font-size: 16px;\n            font-weight: 500;\n            cursor: pointer;\n            text-align: center;\n            text-decoration: none;\n            transition: all 0.3s ease;\n            border: none;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n        }\n\n        .btn-primary {\n            background: linear-gradient(to right, #6a11cb 0%, #2575fc 100%);\n            color: #fff;\n        }\n\n        .btn-primary:hover {\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n            transform: translateY(-1px);\n        }\n\n        .btn-secondary {\n            background-color: #e0e0e0;\n            color: #555;\n        }\n\n        .btn-secondary:hover {\n            background-color: #d0d0d0;\n            color: #333;\n        }\n\n        .btn-success {\n            background-color: #28a745;\n            color: #fff;\n        }\n\n        .btn-success:hover {\n            background-color: #218838;\n        }\n\n        .btn-danger {\n            background-color: #dc3545;\n            color: #fff;\n        }\n\n        .btn-danger:hover {\n            background-color: #c82333;\n        }\n\n        .btn-info {\n            background-color: #17a2b8;\n            color: #fff;\n        }\n        .btn-info:hover {\n            background-color: #138496;\n        }\n\n        .btn-group {\n            display: flex;\n            gap: 10px;\n            margin-top: 20px;\n        }\n\n        .btn-group .btn {\n            flex: 1;\n        }\n\n        /* 短链接列表 */\n        .short-link-list {\n            list-style: none;\n            padding: 0;\n            margin: 0;\n        }\n\n        .short-link-item {\n            background-color: #f9f9f9;\n            border-radius: 10px;\n            margin-bottom: 12px;\n            padding: 15px;\n            border: 1px solid #eee;\n            display: flex;\n            flex-direction: column;\n            gap: 10px;\n            position: relative;\n            transition: background-color 0.3s ease;\n        }\n\n        .short-link-item:hover {\n            background-color: #f0f8ff;\n        }\n\n        .link-display {\n            display: flex;\n            flex-direction: column;\n            gap: 5px;\n        }\n\n        .link-label {\n            font-size: 13px;\n            color: #888;\n        }\n\n        .link-value {\n            font-size: 15px;\n            color: #333;\n            word-break: break-all; /* 防止长链接溢出 */\n        }\n\n        .link-value.short {\n            color: #2575fc;\n            font-weight: 500;\n        }\n\n        /* 链接状态样式 */\n        .link-status {\n            font-weight: 600;\n            padding: 3px 8px;\n            border-radius: 5px;\n            font-size: 14px;\n            display: inline-block;\n        }\n\n        .status-valid {\n            color: #28a745; /* Green */\n            background-color: #e6ffed;\n        }\n\n        .status-invalid {\n            color: #dc3545; /* Red */\n            background-color: #ffe0e3;\n        }\n\n        .item-actions {\n            display: flex;\n            gap: 8px;\n            margin-top: 10px;\n            justify-content: flex-end; /* 按钮靠右对齐 */\n        }\n\n        .item-actions .btn {\n            padding: 8px 12px;\n            font-size: 13px;\n            box-shadow: none; /* 列表内按钮不需要阴影 */\n            flex-grow: 0; /* 不让按钮拉伸 */\n            white-space: nowrap; /* 防止文字换行 */\n        }\n\n        /* 消息提示 */\n        .message {\n            padding: 12px;\n            border-radius: 8px;\n            margin-top: 15px;\n            font-size: 14px;\n            color: #fff;\n            text-align: center;\n            animation: fadeIn 0.5s ease-out;\n        }\n\n        .message.success {\n            background-color: #28a745;\n        }\n\n        .message.error {\n            background-color: #dc3545;\n        }\n\n        .message.info {\n            background-color: #17a2b8;\n        }\n\n        @keyframes fadeIn {\n            from { opacity: 0; transform: translateY(-10px); }\n            to { opacity: 1; transform: translateY(0); }\n        }\n\n        /* 模态框/弹窗 */\n        .modal-overlay {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background-color: rgba(0, 0, 0, 0.6);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            z-index: 1000;\n            opacity: 0;\n            visibility: hidden;\n            transition: opacity 0.3s ease, visibility 0.3s ease;\n        }\n\n        .modal-overlay.active {\n            opacity: 1;\n            visibility: visible;\n        }\n\n        .modal-content {\n            background-color: #fff;\n            padding: 25px;\n            border-radius: 15px;\n            width: 90%;\n            max-width: 400px;\n            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);\n            transform: translateY(20px);\n            opacity: 0;\n            transition: transform 0.3s ease, opacity 0.3s ease;\n        }\n\n        .modal-overlay.active .modal-content {\n            transform: translateY(0);\n            opacity: 1;\n        }\n\n        .modal-title {\n            font-size: 20px;\n            font-weight: 600;\n            margin-bottom: 20px;\n            color: #333;\n            text-align: center;\n        }\n\n        .modal-content .form-group {\n            margin-bottom: 20px;\n        }\n\n        /* 辅助类 */\n        .hidden {\n            display: none !important;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>网盘拉新达人助手</h1>\n        </div>\n\n        <!-- 创建短链接卡片 -->\n        <div class=\"card\">\n            <h2 class=\"card-title\">创建短链接</h2>\n            <div class=\"form-group\">\n                <label for=\"originalLinkInput\">原始网盘链接:</label>\n                <textarea id=\"originalLinkInput\" placeholder=\"请在此粘贴您的原始网盘链接\" rows=\"3\"></textarea>\n            </div>\n            <button id=\"generateShortLinkBtn\" class=\"btn btn-primary\" style=\"width: 100%;\">生成短链接</button>\n            <div id=\"createMessage\" class=\"message hidden\"></div>\n            <div id=\"newShortLinkDisplay\" class=\"form-group hidden\" style=\"margin-top: 20px;\">\n                <label>生成的短链接:</label>\n                <input type=\"text\" id=\"generatedShortLink\" readonly>\n                <button class=\"btn btn-info\" style=\"width: 100%; margin-top: 10px;\" onclick=\"copyShortLink(document.getElementById('generatedShortLink').value)\">复制短链接</button>\n            </div>\n        </div>\n\n        <!-- 短链接管理卡片 -->\n        <div class=\"card\">\n            <h2 class=\"card-title\">短链接列表与链接有效性监控</h2>\n            <ul id=\"shortLinkList\" class=\"short-link-list\">\n                <!-- 短链接项将通过JS动态加载 -->\n            </ul>\n            <div id=\"listEmptyMessage\" class=\"message info hidden\">暂无短链接，快去创建吧！</div>\n        </div>\n    </div>\n\n    <!-- 编辑短链接模态框 -->\n    <div id=\"editModalOverlay\" class=\"modal-overlay\">\n        <div class=\"modal-content\">\n            <h3 class=\"modal-title\">编辑短链接</h3>\n            <div class=\"form-group\">\n                <label for=\"editOriginalLinkInput\">修改原始网盘链接:</label>\n                <textarea id=\"editOriginalLinkInput\" rows=\"3\"></textarea>\n            </div>\n            <div id=\"editMessage\" class=\"message hidden\"></div>\n            <div class=\"btn-group\">\n                <button id=\"saveEditBtn\" class=\"btn btn-primary\">保存</button>\n                <button id=\"cancelEditBtn\" class=\"btn btn-secondary\">取消</button>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        // 软件基本信息\n        const SOFTWARE_NAME = \"网盘拉新达人助手\";\n        const VERSION = \"V1.6.1\";\n\n        // DOM 元素获取\n        const originalLinkInput = document.getElementById('originalLinkInput');\n        const generateShortLinkBtn = document.getElementById('generateShortLinkBtn');\n        const createMessage = document.getElementById('createMessage');\n        const newShortLinkDisplay = document.getElementById('newShortLinkDisplay');\n        const generatedShortLinkField = document.getElementById('generatedShortLink');\n        const shortLinkListElement = document.getElementById('shortLinkList');\n        const listEmptyMessage = document.getElementById('listEmptyMessage');\n\n        const editModalOverlay = document.getElementById('editModalOverlay');\n        const editOriginalLinkInput = document.getElementById('editOriginalLinkInput');\n        const saveEditBtn = document.getElementById('saveEditBtn');\n        const cancelEditBtn = document.getElementById('cancelEditBtn');\n        const editMessage = document.getElementById('editMessage');\n\n        let shortLinks = []; // 存储短链接数据\n        let currentEditingId = null; // 当前正在编辑的短链接ID\n\n        // 初始化加载数据\n        document.addEventListener('DOMContentLoaded', () => {\n            loadShortLinks();\n            renderShortLinks();\n            // 模拟链接有效性检测，每15秒执行一次\n            simulateLinkValidityCheck(); // 页面加载后立即执行一次\n            setInterval(simulateLinkValidityCheck, 15000); // 每15秒执行一次\n        });\n\n        // 加载短链接数据\n        function loadShortLinks() {\n            const storedLinks = localStorage.getItem('shortLinks');\n            if (storedLinks) {\n                shortLinks = JSON.parse(storedLinks);\n                // 确保所有加载的链接都有 status 和 lastChecked 字段\n                shortLinks.forEach(link => {\n                    if (!link.status) link.status = 'valid'; // 默认有效\n                    if (!link.lastChecked) link.lastChecked = new Date().toLocaleString(); // 默认当前时间\n                });\n            } else {\n                // 内置测试数据\n                shortLinks = [\n                    {\n                        id: 's' + Date.now().toString().slice(-6) + '001',\n                        shortLink: 'https://dwz.cn/pan1abc',\n                        originalLink: 'https://pan.baidu.com/s/1aBcDeFgHiJkLmNoPqRsTuvWxyz0123456789',\n                        status: 'valid',\n                        lastChecked: new Date().toLocaleString()\n                    },\n                    {\n                        id: 's' + Date.now().toString().slice(-6) + '002',\n                        shortLink: 'https://dwz.cn/pan2def',\n                        originalLink: 'https://cloud.189.cn/t/exampleLink2',\n                        status: 'valid',\n                        lastChecked: new Date().toLocaleString()\n                    },\n                    {\n                        id: 's' + Date.now().toString().slice(-6) + '003',\n                        shortLink: 'https://dwz.cn/pan3ghi',\n                        originalLink: 'https://www.aliyundrive.com/s/anotherExampleLink3',\n                        status: 'valid',\n                        lastChecked: new Date().toLocaleString()\n                    }\n                ];\n                saveShortLinks(); // 保存测试数据\n            }\n        }\n\n        // 保存短链接数据到 localStorage\n        function saveShortLinks() {\n            localStorage.setItem('shortLinks', JSON.stringify(shortLinks));\n        }\n\n        // 验证链接有效性（简单判断是否为URL格式）\n        function isValidUrl(url) {\n            try {\n                new URL(url);\n                return true;\n            } catch (e) {\n                return false;\n            }\n        }\n\n        // 显示消息提示\n        function showMessage(element, msg, type = 'info', duration = 3000) {\n            element.textContent = msg;\n            element.className = `message ${type}`;\n            element.classList.remove('hidden');\n            setTimeout(() => {\n                element.classList.add('hidden');\n            }, duration);\n        }\n\n        // 生成唯一的短链接ID\n        function generateUniqueId() {\n            return 's' + Date.now().toString() + Math.random().toString(36).substr(2, 5);\n        }\n\n        // 模拟生成短链接\n        function simulateShortLink(originalUrl) {\n            const hash = Math.random().toString(36).substr(2, 7); // 7位随机字符串\n            return `https://dwz.cn/${hash}`; // 模拟短链接域名\n        }\n\n        // 获取链接状态文本\n        function getStatusText(status) {\n            switch (status) {\n                case 'valid': return '有效';\n                case 'invalid': return '失效';\n                default: return '未知';\n            }\n        }\n\n        // 模拟链接有效性检测任务\n        function simulateLinkValidityCheck() {\n            console.log('执行模拟链接有效性检测...');\n            shortLinks.forEach(link => {\n                // 模拟15%的概率链接失效\n                if (Math.random() < 0.15) {\n                    link.status = 'invalid';\n                } else {\n                    link.status = 'valid'; // 否则认为有效\n                }\n                link.lastChecked = new Date().toLocaleString(); // 更新上次检测时间\n            });\n            saveShortLinks();\n            renderShortLinks();\n            showMessage(createMessage, '链接有效性检测已完成！', 'info', 2000);\n        }\n\n        // 渲染短链接列表\n        function renderShortLinks() {\n            shortLinkListElement.innerHTML = ''; // 清空现有列表\n\n            if (shortLinks.length === 0) {\n                listEmptyMessage.classList.remove('hidden');\n                return;\n            } else {\n                listEmptyMessage.classList.add('hidden');\n            }\n\n            shortLinks.forEach(link => {\n                const listItem = document.createElement('li');\n                listItem.className = 'short-link-item';\n                listItem.dataset.id = link.id; // 存储ID以便操作\n\n                listItem.innerHTML = `\n                    <div class=\"link-display\">\n                        <span class=\"link-label\">短链接:</span>\n                        <span class=\"link-value short\">${link.shortLink}</span>\n                    </div>\n                    <div class=\"link-display\">\n                        <span class=\"link-label\">原始链接:</span>\n                        <span class=\"link-value\">${link.originalLink}</span>\n                    </div>\n                    <div class=\"link-display\">\n                        <span class=\"link-label\">状态:</span>\n                        <span class=\"link-status status-${link.status}\">${getStatusText(link.status)}</span>\n                    </div>\n                    <div class=\"link-display\">\n                        <span class=\"link-label\">上次检测:</span>\n                        <span class=\"link-value\">${link.lastChecked || 'N/A'}</span>\n                    </div>\n                    <div class=\"item-actions\">\n                        <button class=\"btn btn-info\" onclick=\"copyShortLink('${link.shortLink}')\">复制</button>\n                        <button class=\"btn btn-secondary\" onclick=\"editShortLink('${link.id}')\">编辑</button>\n                        <button class=\"btn btn-danger\" onclick=\"deleteShortLink('${link.id}')\">删除</button>\n                    </div>\n                `;\n                shortLinkListElement.appendChild(listItem);\n            });\n        }\n\n        // 事件监听器：生成短链接\n        generateShortLinkBtn.addEventListener('click', () => {\n            const originalUrl = originalLinkInput.value.trim();\n\n            if (!originalUrl) {\n                showMessage(createMessage, '原始网盘链接不能为空！', 'error');\n                return;\n            }\n            if (!isValidUrl(originalUrl)) {\n                showMessage(createMessage, '原始网盘链接无效，请检查！', 'error');\n                return;\n            }\n\n            // 检查是否已存在相同的原始链接\n            const existingLink = shortLinks.find(link => link.originalLink === originalUrl);\n            if (existingLink) {\n                showMessage(createMessage, '此原始链接已存在短链接！', 'info');\n                generatedShortLinkField.value = existingLink.shortLink;\n                newShortLinkDisplay.classList.remove('hidden');\n                return;\n            }\n\n            // 模拟生成短链接\n            const newShortLink = simulateShortLink(originalUrl);\n            const newId = generateUniqueId();\n\n            const newLinkItem = {\n                id: newId,\n                shortLink: newShortLink,\n                originalLink: originalUrl,\n                status: 'valid', // 新链接默认有效\n                lastChecked: new Date().toLocaleString() // 设置首次检测时间\n            };\n\n            shortLinks.unshift(newLinkItem); // 添加到列表开头\n            saveShortLinks();\n            renderShortLinks();\n\n            generatedShortLinkField.value = newShortLink;\n            newShortLinkDisplay.classList.remove('hidden');\n            showMessage(createMessage, '短链接生成成功！', 'success');\n            originalLinkInput.value = ''; // 清空输入框\n        });\n\n        // 复制短链接\n        function copyShortLink(link) {\n            navigator.clipboard.writeText(link)\n                .then(() => {\n                    showMessage(createMessage, '短链接已复制到剪贴板！', 'success', 2000);\n                })\n                .catch(err => {\n                    console.error('复制失败:', err);\n                    showMessage(createMessage, '复制失败，请手动复制。', 'error', 2000);\n                });\n        }\n\n        // 编辑短链接\n        function editShortLink(id) {\n            const linkToEdit = shortLinks.find(link => link.id === id);\n            if (linkToEdit) {\n                currentEditingId = id;\n                editOriginalLinkInput.value = linkToEdit.originalLink;\n                editModalOverlay.classList.add('active');\n            }\n        }\n\n        // 保存编辑\n        saveEditBtn.addEventListener('click', () => {\n            const newOriginalLink = editOriginalLinkInput.value.trim();\n\n            if (!newOriginalLink) {\n                showMessage(editMessage, '原始网盘链接不能为空！', 'error');\n                return;\n            }\n            if (!isValidUrl(newOriginalLink)) {\n                showMessage(editMessage, '原始网盘链接无效，请检查！', 'error');\n                return;\n            }\n\n            const linkIndex = shortLinks.findIndex(link => link.id === currentEditingId);\n            if (linkIndex !== -1) {\n                shortLinks[linkIndex].originalLink = newOriginalLink;\n                // 编辑后，可以重新将状态设为“有效”并更新检测时间，模拟重新检测\n                shortLinks[linkIndex].status = 'valid';\n                shortLinks[linkIndex].lastChecked = new Date().toLocaleString();\n\n                saveShortLinks();\n                renderShortLinks();\n                showMessage(createMessage, '短链接信息更新成功！', 'success');\n                closeEditModal();\n            } else {\n                showMessage(editMessage, '未找到要编辑的短链接。', 'error');\n            }\n        });\n\n        // 取消编辑\n        cancelEditBtn.addEventListener('click', () => {\n            closeEditModal();\n        });\n\n        // 关闭编辑模态框\n        function closeEditModal() {\n            editModalOverlay.classList.remove('active');\n            editOriginalLinkInput.value = '';\n            editMessage.classList.add('hidden');\n            currentEditingId = null;\n        }\n\n        // 删除短链接\n        function deleteShortLink(id) {\n            if (confirm('确定要删除此短链接吗？')) {\n                shortLinks = shortLinks.filter(link => link.id !== id);\n                saveShortLinks();\n                renderShortLinks();\n                showMessage(createMessage, '短链接删除成功！', 'success');\n            }\n        }\n\n        // 点击模态框背景关闭\n        editModalOverlay.addEventListener('click', (event) => {\n            if (event.target === editModalOverlay) {\n                closeEditModal();\n            }\n        });\n\n    </script>\n</body>\n</html>\n"
	htmlPath := global.WORK_DIR + "/test.html"
	// 将字符串写入文件，如果文件不存在会创建，存在则覆盖
	os.WriteFile(htmlPath, []byte(htmlContent), 0644)
	// 创建上下文
	ctx, cancel := chromedp.NewContext(context.Background())
	defer cancel()

	var buf []byte
	err := chromedp.Run(ctx,
		// 设置视口
		chromedp.EmulateViewport(430, 930),
		// 设置内容
		chromedp.Navigate("file://"+htmlPath),
		// 等待页面加载完成
		chromedp.WaitReady("body"),
		// 等待 JavaScript 执行
		chromedp.Sleep(2*time.Second),
		// 截图
		chromedp.CaptureScreenshot(&buf),
	)
	if err != nil {
		log.Fatal(err)
	}

	// 保存截图到文件
	err = ioutil.WriteFile("screenshot.png", buf, 0644)
	if err != nil {
		log.Fatal(err)
	}

	log.Println("截图已保存为 screenshot.png")
}

func HTMLToScreenshot2(t *testing.T) {
	htmlContent := "\n\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n    <title>网盘拉新达人助手 - 链接有效性监控</title>\n    <style>\n        /* 全局样式 */\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n            margin: 0;\n            padding: 0;\n            background-color: #f0f2f5; /* 浅灰色背景 */\n            color: #333;\n            -webkit-font-smoothing: antialiased;\n            -moz-osx-font-smoothing: grayscale;\n            overflow-x: hidden; /* 防止水平滚动 */\n        }\n\n        /* 移动端容器 */\n        .container {\n            max-width: 500px; /* 限制内容宽度，模拟手机屏幕 */\n            margin: 0 auto;\n            padding: 15px;\n            box-sizing: border-box;\n            background-color: #fff; /* 主内容区白色背景 */\n            min-height: 100vh; /* 确保背景覆盖整个屏幕 */\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.05); /* 轻微阴影 */\n        }\n\n        /* 头部导航 */\n        .header {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            padding: 15px 0;\n            margin-bottom: 20px;\n            position: relative;\n            background: linear-gradient(to right, #6a11cb 0%, #2575fc 100%); /* 渐变背景 */\n            color: #fff;\n            border-radius: 10px;\n            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\n        }\n\n        .header h1 {\n            font-size: 22px;\n            margin: 0;\n            font-weight: 600;\n        }\n\n        /* 卡片风格 */\n        .card {\n            background-color: #fff;\n            border-radius: 12px;\n            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);\n            margin-bottom: 20px;\n            padding: 20px;\n            transition: all 0.3s ease;\n        }\n\n        .card:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.12);\n        }\n\n        .card-title {\n            font-size: 18px;\n            font-weight: 600;\n            color: #333;\n            margin-bottom: 15px;\n            border-bottom: 2px solid #f0f2f5;\n            padding-bottom: 10px;\n        }\n\n        /* 表单元素 */\n        .form-group {\n            margin-bottom: 15px;\n        }\n\n        label {\n            display: block;\n            margin-bottom: 8px;\n            font-size: 14px;\n            color: #555;\n            font-weight: 500;\n        }\n\n        textarea, input[type=\"text\"] {\n            width: calc(100% - 24px); /* 减去padding */\n            padding: 12px;\n            border: 1px solid #ddd;\n            border-radius: 8px;\n            font-size: 15px;\n            box-sizing: border-box;\n            transition: border-color 0.3s ease;\n            resize: vertical; /* 允许垂直调整大小 */\n            min-height: 40px;\n        }\n\n        textarea:focus, input[type=\"text\"]:focus {\n            border-color: #2575fc;\n            outline: none;\n            box-shadow: 0 0 0 3px rgba(37, 117, 252, 0.2);\n        }\n\n        /* 按钮 */\n        .btn {\n            display: inline-block;\n            padding: 12px 20px;\n            border-radius: 8px;\n            font-size: 16px;\n            font-weight: 500;\n            cursor: pointer;\n            text-align: center;\n            text-decoration: none;\n            transition: all 0.3s ease;\n            border: none;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n        }\n\n        .btn-primary {\n            background: linear-gradient(to right, #6a11cb 0%, #2575fc 100%);\n            color: #fff;\n        }\n\n        .btn-primary:hover {\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n            transform: translateY(-1px);\n        }\n\n        .btn-secondary {\n            background-color: #e0e0e0;\n            color: #555;\n        }\n\n        .btn-secondary:hover {\n            background-color: #d0d0d0;\n            color: #333;\n        }\n\n        .btn-success {\n            background-color: #28a745;\n            color: #fff;\n        }\n\n        .btn-success:hover {\n            background-color: #218838;\n        }\n\n        .btn-danger {\n            background-color: #dc3545;\n            color: #fff;\n        }\n\n        .btn-danger:hover {\n            background-color: #c82333;\n        }\n\n        .btn-info {\n            background-color: #17a2b8;\n            color: #fff;\n        }\n        .btn-info:hover {\n            background-color: #138496;\n        }\n\n        .btn-group {\n            display: flex;\n            gap: 10px;\n            margin-top: 20px;\n        }\n\n        .btn-group .btn {\n            flex: 1;\n        }\n\n        /* 短链接列表 */\n        .short-link-list {\n            list-style: none;\n            padding: 0;\n            margin: 0;\n        }\n\n        .short-link-item {\n            background-color: #f9f9f9;\n            border-radius: 10px;\n            margin-bottom: 12px;\n            padding: 15px;\n            border: 1px solid #eee;\n            display: flex;\n            flex-direction: column;\n            gap: 10px;\n            position: relative;\n            transition: background-color 0.3s ease;\n        }\n\n        .short-link-item:hover {\n            background-color: #f0f8ff;\n        }\n\n        .link-display {\n            display: flex;\n            flex-direction: column;\n            gap: 5px;\n        }\n\n        .link-label {\n            font-size: 13px;\n            color: #888;\n        }\n\n        .link-value {\n            font-size: 15px;\n            color: #333;\n            word-break: break-all; /* 防止长链接溢出 */\n        }\n\n        .link-value.short {\n            color: #2575fc;\n            font-weight: 500;\n        }\n\n        /* 链接状态样式 */\n        .link-status {\n            font-weight: 600;\n            padding: 3px 8px;\n            border-radius: 5px;\n            font-size: 14px;\n            display: inline-block;\n        }\n\n        .status-valid {\n            color: #28a745; /* Green */\n            background-color: #e6ffed;\n        }\n\n        .status-invalid {\n            color: #dc3545; /* Red */\n            background-color: #ffe0e3;\n        }\n\n        .item-actions {\n            display: flex;\n            gap: 8px;\n            margin-top: 10px;\n            justify-content: flex-end; /* 按钮靠右对齐 */\n        }\n\n        .item-actions .btn {\n            padding: 8px 12px;\n            font-size: 13px;\n            box-shadow: none; /* 列表内按钮不需要阴影 */\n            flex-grow: 0; /* 不让按钮拉伸 */\n            white-space: nowrap; /* 防止文字换行 */\n        }\n\n        /* 消息提示 */\n        .message {\n            padding: 12px;\n            border-radius: 8px;\n            margin-top: 15px;\n            font-size: 14px;\n            color: #fff;\n            text-align: center;\n            animation: fadeIn 0.5s ease-out;\n        }\n\n        .message.success {\n            background-color: #28a745;\n        }\n\n        .message.error {\n            background-color: #dc3545;\n        }\n\n        .message.info {\n            background-color: #17a2b8;\n        }\n\n        @keyframes fadeIn {\n            from { opacity: 0; transform: translateY(-10px); }\n            to { opacity: 1; transform: translateY(0); }\n        }\n\n        /* 模态框/弹窗 */\n        .modal-overlay {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background-color: rgba(0, 0, 0, 0.6);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            z-index: 1000;\n            opacity: 0;\n            visibility: hidden;\n            transition: opacity 0.3s ease, visibility 0.3s ease;\n        }\n\n        .modal-overlay.active {\n            opacity: 1;\n            visibility: visible;\n        }\n\n        .modal-content {\n            background-color: #fff;\n            padding: 25px;\n            border-radius: 15px;\n            width: 90%;\n            max-width: 400px;\n            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);\n            transform: translateY(20px);\n            opacity: 0;\n            transition: transform 0.3s ease, opacity 0.3s ease;\n        }\n\n        .modal-overlay.active .modal-content {\n            transform: translateY(0);\n            opacity: 1;\n        }\n\n        .modal-title {\n            font-size: 20px;\n            font-weight: 600;\n            margin-bottom: 20px;\n            color: #333;\n            text-align: center;\n        }\n\n        .modal-content .form-group {\n            margin-bottom: 20px;\n        }\n\n        /* 辅助类 */\n        .hidden {\n            display: none !important;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>网盘拉新达人助手</h1>\n        </div>\n\n        <!-- 创建短链接卡片 -->\n        <div class=\"card\">\n            <h2 class=\"card-title\">创建短链接</h2>\n            <div class=\"form-group\">\n                <label for=\"originalLinkInput\">原始网盘链接:</label>\n                <textarea id=\"originalLinkInput\" placeholder=\"请在此粘贴您的原始网盘链接\" rows=\"3\"></textarea>\n            </div>\n            <button id=\"generateShortLinkBtn\" class=\"btn btn-primary\" style=\"width: 100%;\">生成短链接</button>\n            <div id=\"createMessage\" class=\"message hidden\"></div>\n            <div id=\"newShortLinkDisplay\" class=\"form-group hidden\" style=\"margin-top: 20px;\">\n                <label>生成的短链接:</label>\n                <input type=\"text\" id=\"generatedShortLink\" readonly>\n                <button class=\"btn btn-info\" style=\"width: 100%; margin-top: 10px;\" onclick=\"copyShortLink(document.getElementById('generatedShortLink').value)\">复制短链接</button>\n            </div>\n        </div>\n\n        <!-- 短链接管理卡片 -->\n        <div class=\"card\">\n            <h2 class=\"card-title\">短链接列表与链接有效性监控</h2>\n            <ul id=\"shortLinkList\" class=\"short-link-list\">\n                <!-- 短链接项将通过JS动态加载 -->\n            </ul>\n            <div id=\"listEmptyMessage\" class=\"message info hidden\">暂无短链接，快去创建吧！</div>\n        </div>\n    </div>\n\n    <!-- 编辑短链接模态框 -->\n    <div id=\"editModalOverlay\" class=\"modal-overlay\">\n        <div class=\"modal-content\">\n            <h3 class=\"modal-title\">编辑短链接</h3>\n            <div class=\"form-group\">\n                <label for=\"editOriginalLinkInput\">修改原始网盘链接:</label>\n                <textarea id=\"editOriginalLinkInput\" rows=\"3\"></textarea>\n            </div>\n            <div id=\"editMessage\" class=\"message hidden\"></div>\n            <div class=\"btn-group\">\n                <button id=\"saveEditBtn\" class=\"btn btn-primary\">保存</button>\n                <button id=\"cancelEditBtn\" class=\"btn btn-secondary\">取消</button>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        // 软件基本信息\n        const SOFTWARE_NAME = \"网盘拉新达人助手\";\n        const VERSION = \"V1.6.1\";\n\n        // DOM 元素获取\n        const originalLinkInput = document.getElementById('originalLinkInput');\n        const generateShortLinkBtn = document.getElementById('generateShortLinkBtn');\n        const createMessage = document.getElementById('createMessage');\n        const newShortLinkDisplay = document.getElementById('newShortLinkDisplay');\n        const generatedShortLinkField = document.getElementById('generatedShortLink');\n        const shortLinkListElement = document.getElementById('shortLinkList');\n        const listEmptyMessage = document.getElementById('listEmptyMessage');\n\n        const editModalOverlay = document.getElementById('editModalOverlay');\n        const editOriginalLinkInput = document.getElementById('editOriginalLinkInput');\n        const saveEditBtn = document.getElementById('saveEditBtn');\n        const cancelEditBtn = document.getElementById('cancelEditBtn');\n        const editMessage = document.getElementById('editMessage');\n\n        let shortLinks = []; // 存储短链接数据\n        let currentEditingId = null; // 当前正在编辑的短链接ID\n\n        // 初始化加载数据\n        document.addEventListener('DOMContentLoaded', () => {\n            loadShortLinks();\n            renderShortLinks();\n            // 模拟链接有效性检测，每15秒执行一次\n            simulateLinkValidityCheck(); // 页面加载后立即执行一次\n            setInterval(simulateLinkValidityCheck, 15000); // 每15秒执行一次\n        });\n\n        // 加载短链接数据\n        function loadShortLinks() {\n            const storedLinks = localStorage.getItem('shortLinks');\n            if (storedLinks) {\n                shortLinks = JSON.parse(storedLinks);\n                // 确保所有加载的链接都有 status 和 lastChecked 字段\n                shortLinks.forEach(link => {\n                    if (!link.status) link.status = 'valid'; // 默认有效\n                    if (!link.lastChecked) link.lastChecked = new Date().toLocaleString(); // 默认当前时间\n                });\n            } else {\n                // 内置测试数据\n                shortLinks = [\n                    {\n                        id: 's' + Date.now().toString().slice(-6) + '001',\n                        shortLink: 'https://dwz.cn/pan1abc',\n                        originalLink: 'https://pan.baidu.com/s/1aBcDeFgHiJkLmNoPqRsTuvWxyz0123456789',\n                        status: 'valid',\n                        lastChecked: new Date().toLocaleString()\n                    },\n                    {\n                        id: 's' + Date.now().toString().slice(-6) + '002',\n                        shortLink: 'https://dwz.cn/pan2def',\n                        originalLink: 'https://cloud.189.cn/t/exampleLink2',\n                        status: 'valid',\n                        lastChecked: new Date().toLocaleString()\n                    },\n                    {\n                        id: 's' + Date.now().toString().slice(-6) + '003',\n                        shortLink: 'https://dwz.cn/pan3ghi',\n                        originalLink: 'https://www.aliyundrive.com/s/anotherExampleLink3',\n                        status: 'valid',\n                        lastChecked: new Date().toLocaleString()\n                    }\n                ];\n                saveShortLinks(); // 保存测试数据\n            }\n        }\n\n        // 保存短链接数据到 localStorage\n        function saveShortLinks() {\n            localStorage.setItem('shortLinks', JSON.stringify(shortLinks));\n        }\n\n        // 验证链接有效性（简单判断是否为URL格式）\n        function isValidUrl(url) {\n            try {\n                new URL(url);\n                return true;\n            } catch (e) {\n                return false;\n            }\n        }\n\n        // 显示消息提示\n        function showMessage(element, msg, type = 'info', duration = 3000) {\n            element.textContent = msg;\n            element.className = `message ${type}`;\n            element.classList.remove('hidden');\n            setTimeout(() => {\n                element.classList.add('hidden');\n            }, duration);\n        }\n\n        // 生成唯一的短链接ID\n        function generateUniqueId() {\n            return 's' + Date.now().toString() + Math.random().toString(36).substr(2, 5);\n        }\n\n        // 模拟生成短链接\n        function simulateShortLink(originalUrl) {\n            const hash = Math.random().toString(36).substr(2, 7); // 7位随机字符串\n            return `https://dwz.cn/${hash}`; // 模拟短链接域名\n        }\n\n        // 获取链接状态文本\n        function getStatusText(status) {\n            switch (status) {\n                case 'valid': return '有效';\n                case 'invalid': return '失效';\n                default: return '未知';\n            }\n        }\n\n        // 模拟链接有效性检测任务\n        function simulateLinkValidityCheck() {\n            console.log('执行模拟链接有效性检测...');\n            shortLinks.forEach(link => {\n                // 模拟15%的概率链接失效\n                if (Math.random() < 0.15) {\n                    link.status = 'invalid';\n                } else {\n                    link.status = 'valid'; // 否则认为有效\n                }\n                link.lastChecked = new Date().toLocaleString(); // 更新上次检测时间\n            });\n            saveShortLinks();\n            renderShortLinks();\n            showMessage(createMessage, '链接有效性检测已完成！', 'info', 2000);\n        }\n\n        // 渲染短链接列表\n        function renderShortLinks() {\n            shortLinkListElement.innerHTML = ''; // 清空现有列表\n\n            if (shortLinks.length === 0) {\n                listEmptyMessage.classList.remove('hidden');\n                return;\n            } else {\n                listEmptyMessage.classList.add('hidden');\n            }\n\n            shortLinks.forEach(link => {\n                const listItem = document.createElement('li');\n                listItem.className = 'short-link-item';\n                listItem.dataset.id = link.id; // 存储ID以便操作\n\n                listItem.innerHTML = `\n                    <div class=\"link-display\">\n                        <span class=\"link-label\">短链接:</span>\n                        <span class=\"link-value short\">${link.shortLink}</span>\n                    </div>\n                    <div class=\"link-display\">\n                        <span class=\"link-label\">原始链接:</span>\n                        <span class=\"link-value\">${link.originalLink}</span>\n                    </div>\n                    <div class=\"link-display\">\n                        <span class=\"link-label\">状态:</span>\n                        <span class=\"link-status status-${link.status}\">${getStatusText(link.status)}</span>\n                    </div>\n                    <div class=\"link-display\">\n                        <span class=\"link-label\">上次检测:</span>\n                        <span class=\"link-value\">${link.lastChecked || 'N/A'}</span>\n                    </div>\n                    <div class=\"item-actions\">\n                        <button class=\"btn btn-info\" onclick=\"copyShortLink('${link.shortLink}')\">复制</button>\n                        <button class=\"btn btn-secondary\" onclick=\"editShortLink('${link.id}')\">编辑</button>\n                        <button class=\"btn btn-danger\" onclick=\"deleteShortLink('${link.id}')\">删除</button>\n                    </div>\n                `;\n                shortLinkListElement.appendChild(listItem);\n            });\n        }\n\n        // 事件监听器：生成短链接\n        generateShortLinkBtn.addEventListener('click', () => {\n            const originalUrl = originalLinkInput.value.trim();\n\n            if (!originalUrl) {\n                showMessage(createMessage, '原始网盘链接不能为空！', 'error');\n                return;\n            }\n            if (!isValidUrl(originalUrl)) {\n                showMessage(createMessage, '原始网盘链接无效，请检查！', 'error');\n                return;\n            }\n\n            // 检查是否已存在相同的原始链接\n            const existingLink = shortLinks.find(link => link.originalLink === originalUrl);\n            if (existingLink) {\n                showMessage(createMessage, '此原始链接已存在短链接！', 'info');\n                generatedShortLinkField.value = existingLink.shortLink;\n                newShortLinkDisplay.classList.remove('hidden');\n                return;\n            }\n\n            // 模拟生成短链接\n            const newShortLink = simulateShortLink(originalUrl);\n            const newId = generateUniqueId();\n\n            const newLinkItem = {\n                id: newId,\n                shortLink: newShortLink,\n                originalLink: originalUrl,\n                status: 'valid', // 新链接默认有效\n                lastChecked: new Date().toLocaleString() // 设置首次检测时间\n            };\n\n            shortLinks.unshift(newLinkItem); // 添加到列表开头\n            saveShortLinks();\n            renderShortLinks();\n\n            generatedShortLinkField.value = newShortLink;\n            newShortLinkDisplay.classList.remove('hidden');\n            showMessage(createMessage, '短链接生成成功！', 'success');\n            originalLinkInput.value = ''; // 清空输入框\n        });\n\n        // 复制短链接\n        function copyShortLink(link) {\n            navigator.clipboard.writeText(link)\n                .then(() => {\n                    showMessage(createMessage, '短链接已复制到剪贴板！', 'success', 2000);\n                })\n                .catch(err => {\n                    console.error('复制失败:', err);\n                    showMessage(createMessage, '复制失败，请手动复制。', 'error', 2000);\n                });\n        }\n\n        // 编辑短链接\n        function editShortLink(id) {\n            const linkToEdit = shortLinks.find(link => link.id === id);\n            if (linkToEdit) {\n                currentEditingId = id;\n                editOriginalLinkInput.value = linkToEdit.originalLink;\n                editModalOverlay.classList.add('active');\n            }\n        }\n\n        // 保存编辑\n        saveEditBtn.addEventListener('click', () => {\n            const newOriginalLink = editOriginalLinkInput.value.trim();\n\n            if (!newOriginalLink) {\n                showMessage(editMessage, '原始网盘链接不能为空！', 'error');\n                return;\n            }\n            if (!isValidUrl(newOriginalLink)) {\n                showMessage(editMessage, '原始网盘链接无效，请检查！', 'error');\n                return;\n            }\n\n            const linkIndex = shortLinks.findIndex(link => link.id === currentEditingId);\n            if (linkIndex !== -1) {\n                shortLinks[linkIndex].originalLink = newOriginalLink;\n                // 编辑后，可以重新将状态设为“有效”并更新检测时间，模拟重新检测\n                shortLinks[linkIndex].status = 'valid';\n                shortLinks[linkIndex].lastChecked = new Date().toLocaleString();\n\n                saveShortLinks();\n                renderShortLinks();\n                showMessage(createMessage, '短链接信息更新成功！', 'success');\n                closeEditModal();\n            } else {\n                showMessage(editMessage, '未找到要编辑的短链接。', 'error');\n            }\n        });\n\n        // 取消编辑\n        cancelEditBtn.addEventListener('click', () => {\n            closeEditModal();\n        });\n\n        // 关闭编辑模态框\n        function closeEditModal() {\n            editModalOverlay.classList.remove('active');\n            editOriginalLinkInput.value = '';\n            editMessage.classList.add('hidden');\n            currentEditingId = null;\n        }\n\n        // 删除短链接\n        function deleteShortLink(id) {\n            if (confirm('确定要删除此短链接吗？')) {\n                shortLinks = shortLinks.filter(link => link.id !== id);\n                saveShortLinks();\n                renderShortLinks();\n                showMessage(createMessage, '短链接删除成功！', 'success');\n            }\n        }\n\n        // 点击模态框背景关闭\n        editModalOverlay.addEventListener('click', (event) => {\n            if (event.target === editModalOverlay) {\n                closeEditModal();\n            }\n        });\n\n    </script>\n</body>\n</html>\n"
	outputPath := "screenshot.png"

	// 创建上下文，取消headless模式进行调试
	opts := append(
		chromedp.DefaultExecAllocatorOptions[:],
		chromedp.NoDefaultBrowserCheck, //不检查默认浏览器
		chromedp.Flag("headless", true),
		chromedp.Flag("blink-settings", "imagesEnabled=true"), //开启图像界面,重点是开启这个
		chromedp.Flag("ignore-certificate-errors", true),      //忽略错误
		chromedp.Flag("disable-web-security", true),           //禁用网络安全标志
		chromedp.Flag("disable-extensions", true),             //开启插件支持
		chromedp.Flag("disable-default-apps", true),
		chromedp.WindowSize(1920, 1080),    // 设置浏览器分辨率（窗口大小）
		chromedp.Flag("disable-gpu", true), //开启gpu渲染
		chromedp.Flag("hide-scrollbars", true),
		chromedp.Flag("mute-audio", true),
		chromedp.Flag("no-sandbox", true),
		chromedp.Flag("no-default-browser-check", true),
		chromedp.NoFirstRun, //设置网站不是首次运行
		chromedp.UserAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36"), //设置UserAgent
	)

	allocCtx, cancel := chromedp.NewExecAllocator(context.Background(), opts...)
	defer cancel()

	ctx, cancel := chromedp.NewContext(allocCtx)
	defer cancel()

	ctx, cancel = context.WithTimeout(ctx, 30*time.Second)
	defer cancel()

	var buf []byte
	// capture entire browser viewport, returning png with quality=90
	if err := chromedp.Run(ctx, fullScreenshot(htmlContent, 100, &buf)); err != nil {
		log.Fatal(err)
	}

	//// 执行任务
	//err := chromedp.Run(ctx,
	//	// 设置视口大小
	//	chromedp.EmulateViewport(1920, 1080),
	//
	//	// 导航到HTML内容
	//	chromedp.Navigate("data:text/html;charset=utf-8,"+htmlContent),
	//
	//	// 等待页面完全加载
	//	chromedp.WaitReady("body", chromedp.ByQuery),
	//
	//	// 等待JavaScript执行完成
	//	chromedp.Sleep(3*time.Second),
	//
	//	// 检查页面内容
	//	chromedp.ActionFunc(func(ctx context.Context) error {
	//		var bodyHTML string
	//		if err := chromedp.Evaluate(`document.body.innerHTML`, &bodyHTML).Do(ctx); err != nil {
	//			return err
	//		}
	//		log.Printf("Body内容长度: %d", len(bodyHTML))
	//
	//		var hasVisibleContent bool
	//		if err := chromedp.Evaluate(`
	//            document.body.innerText.length > 0 ||
	//            document.querySelector('svg') !== null ||
	//            document.querySelector('canvas') !== null ||
	//            document.querySelector('img') !== null
	//        `, &hasVisibleContent).Do(ctx); err != nil {
	//			return err
	//		}
	//
	//		if !hasVisibleContent {
	//			return fmt.Errorf("页面没有可见内容")
	//		}
	//
	//		log.Println("页面有可见内容，继续截图...")
	//		return nil
	//	}),
	//
	//	chromedp.FullScreenshot(&buf, 90),
	//)
	//if err != nil {
	//	log.Fatal(err)
	//}
	//
	//if len(buf) == 0 {
	//	log.Fatal("截图数据为空")
	//}
	//
	// 保存截图
	if err := ioutil.WriteFile(outputPath, buf, 0644); err != nil {
		log.Fatal(err)
	}
}

// 获取整个浏览器窗口的截图（全屏）
// 这将模拟浏览器操作设置。
func fullScreenshot(htmlContent string, quality int64, res *[]byte) chromedp.Tasks {
	return chromedp.Tasks{
		chromedp.Navigate("data:text/html;charset=utf-8;base64," +
			base64.StdEncoding.EncodeToString([]byte(htmlContent))),
		//chromedp.WaitVisible("style"),
		chromedp.Sleep(10 * time.Second),
		//chromedp.OuterHTML(`document.querySelector("body")`, &htmlContent, chromedp.ByJSPath),
		chromedp.ActionFunc(func(ctx context.Context) error {
			// 得到布局页面
			_, _, _, _, _, contentSize, err := page.GetLayoutMetrics().Do(ctx)
			if err != nil {
				return err
			}

			width, height := int64(math.Ceil(contentSize.Width)), int64(math.Ceil(contentSize.Height))

			// 浏览器视窗设置模拟
			err = emulation.SetDeviceMetricsOverride(width, height, 1, false).
				WithScreenOrientation(&emulation.ScreenOrientation{
					Type:  emulation.OrientationTypePortraitPrimary,
					Angle: 0,
				}).
				Do(ctx)
			if err != nil {
				return err
			}

			// 捕捉屏幕截图
			*res, err = page.CaptureScreenshot().
				WithQuality(quality).
				WithClip(&page.Viewport{
					X:      contentSize.X,
					Y:      contentSize.Y,
					Width:  contentSize.Width,
					Height: contentSize.Height,
					Scale:  1,
				}).Do(ctx)
			if err != nil {
				return err
			}
			return nil
		}),
	}
}
