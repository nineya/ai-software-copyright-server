package test

import (
	"context"
	"encoding/base64"
	"github.com/chromedp/cdproto/emulation"
	"github.com/chromedp/cdproto/page"
	"io/ioutil"
	"log"
	"math"
	"testing"
	"time"

	"github.com/chromedp/chromedp"
)

func TestContainer(t *testing.T) {
	t.Run("HTMLToScreenshot", HTMLToScreenshot)
	//t.Run("BookFile", BookFile)
	//t.Run("CodeFile", CodeFile)
	//t.Run("CodeTemplate", CodeTemplate)
}

func HTMLToScreenshot(t *testing.T) {
	htmlContent := "\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\">\n    <title>网盘拉新达人助手</title>\n    <link href=\"https://fonts.googleapis.com/css2?family=Noto+Sans+SC:wght@300;400;500;700&family=Orbitron:wght@400;500;700&display=swap\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\n    <style>\n        /* 全局样式 */\n        :root {\n            --primary-color: #00bcd4; /* 青色 */\n            --secondary-color: #ff4081; /* 粉色 */\n            --background-dark: #1a1a2e; /* 深蓝背景 */\n            --background-light: #2c2c4a; /* 稍亮背景 */\n            --card-background: #3a3a5a; /* 卡片背景 */\n            --text-light: #e0e0e0; /* 浅色文本 */\n            --text-dark: #aaaaaa; /* 深色文本 */\n            --border-color: #4a4a6e; /* 边框颜色 */\n            --success-color: #4caf50; /* 成功 */\n            --danger-color: #f44336; /* 危险 */\n            --warning-color: #ffc107; /* 警告 */\n            --active-glow: 0 0 8px var(--primary-color), 0 0 16px var(--primary-color);\n            --shadow-light: rgba(0, 0, 0, 0.2);\n            --shadow-dark: rgba(0, 0, 0, 0.5);\n        }\n\n        body {\n            font-family: 'Noto Sans SC', sans-serif;\n            background: linear-gradient(135deg, var(--background-dark) 0%, #0f0f1d 100%);\n            color: var(--text-light);\n            margin: 0;\n            display: flex;\n            justify-content: center;\n            align-items: flex-start;\n            min-height: 100vh;\n            padding: 10px;\n            box-sizing: border-box;\n            overflow-y: auto; /* Allow scrolling on body */\n        }\n\n        /* 模拟小程序容器 */\n        .miniapp-container {\n            width: 100%;\n            max-width: 450px; /* 模拟手机宽度 */\n            background-color: var(--background-light);\n            border-radius: 20px;\n            box-shadow: 0 10px 30px var(--shadow-dark);\n            overflow: hidden;\n            display: flex;\n            flex-direction: column;\n            min-height: calc(100vh - 20px); /* 确保容器高度足够，留出一些边距 */\n        }\n\n        /* 头部 */\n        .app-header {\n            background: linear-gradient(90deg, #007bff, var(--primary-color));\n            color: white;\n            padding: 15px 20px;\n            text-align: center;\n            box-shadow: 0 2px 10px var(--shadow-dark);\n            position: relative;\n            z-index: 10;\n        }\n\n        .app-header h1 {\n            margin: 0;\n            font-size: 1.4em;\n            font-family: 'Orbitron', sans-serif;\n            letter-spacing: 1px;\n        }\n\n        .app-header p {\n            margin: 5px 0 0;\n            font-size: 0.8em;\n            color: rgba(255, 255, 255, 0.8);\n        }\n\n        /* 导航栏 */\n        .nav-tabs {\n            display: flex;\n            justify-content: space-around;\n            background-color: var(--card-background);\n            padding: 10px 0;\n            border-bottom: 1px solid var(--border-color);\n            box-shadow: 0 1px 5px var(--shadow-light);\n            position: sticky;\n            top: 0;\n            z-index: 9;\n        }\n\n        .nav-tab-item {\n            flex: 1;\n            text-align: center;\n            padding: 10px 5px;\n            cursor: pointer;\n            color: var(--text-dark);\n            font-size: 0.9em;\n            transition: all 0.3s ease;\n            position: relative;\n        }\n\n        .nav-tab-item:hover {\n            color: var(--text-light);\n            background-color: rgba(0, 0, 0, 0.1);\n        }\n\n        .nav-tab-item.active {\n            color: var(--primary-color);\n            font-weight: bold;\n        }\n\n        .nav-tab-item.active::after {\n            content: '';\n            position: absolute;\n            bottom: -10px;\n            left: 25%;\n            width: 50%;\n            height: 3px;\n            background-color: var(--primary-color);\n            box-shadow: var(--active-glow);\n            border-radius: 2px;\n        }\n\n        /* 主要内容区域 */\n        .app-content {\n            flex-grow: 1;\n            padding: 15px;\n            overflow-y: auto; /* Allow scrolling within content area */\n        }\n\n        .content-section {\n            display: none;\n            padding-bottom: 20px;\n        }\n\n        .content-section.active {\n            display: block;\n        }\n\n        h2 {\n            font-size: 1.2em;\n            color: var(--primary-color);\n            border-bottom: 1px solid var(--border-color);\n            padding-bottom: 10px;\n            margin-top: 0;\n            margin-bottom: 20px;\n            font-family: 'Orbitron', sans-serif;\n            letter-spacing: 0.5px;\n        }\n\n        /* 表单元素 */\n        .form-group {\n            margin-bottom: 15px;\n        }\n\n        label {\n            display: block;\n            margin-bottom: 5px;\n            color: var(--text-light);\n            font-size: 0.9em;\n        }\n\n        input[type=\"text\"],\n        input[type=\"url\"],\n        input[type=\"date\"],\n        select,\n        textarea {\n            width: calc(100% - 20px);\n            padding: 12px 10px;\n            border: 1px solid var(--border-color);\n            border-radius: 8px;\n            background-color: var(--background-dark);\n            color: var(--text-light);\n            font-size: 1em;\n            box-sizing: border-box;\n            transition: border-color 0.3s, box-shadow 0.3s;\n        }\n\n        input[type=\"text\"]:focus,\n        input[type=\"url\"]:focus,\n        input[type=\"date\"]:focus,\n        select:focus,\n        textarea:focus {\n            border-color: var(--primary-color);\n            box-shadow: 0 0 5px rgba(0, 188, 212, 0.5);\n            outline: none;\n        }\n\n        button {\n            background: linear-gradient(90deg, #007bff, var(--primary-color));\n            color: white;\n            border: none;\n            padding: 12px 20px;\n            border-radius: 8px;\n            cursor: pointer;\n            font-size: 1em;\n            font-weight: 500;\n            transition: all 0.3s ease;\n            box-shadow: 0 4px 15px rgba(0, 188, 212, 0.3);\n            display: inline-flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        button:hover {\n            opacity: 0.9;\n            transform: translateY(-2px);\n            box-shadow: 0 6px 20px rgba(0, 188, 212, 0.4);\n        }\n\n        button:active {\n            transform: translateY(0);\n            box-shadow: 0 2px 10px rgba(0, 188, 212, 0.2);\n        }\n\n        button i {\n            margin-right: 8px;\n        }\n\n        .btn-secondary {\n            background: linear-gradient(90deg, #6c757d, #5a6268);\n            box-shadow: 0 4px 15px rgba(108, 117, 125, 0.3);\n        }\n        .btn-secondary:hover {\n            box-shadow: 0 6px 20px rgba(108, 117, 125, 0.4);\n        }\n\n        .btn-danger {\n            background: linear-gradient(90deg, #dc3545, #c82333);\n            box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);\n        }\n        .btn-danger:hover {\n            box-shadow: 0 6px 20px rgba(220, 53, 69, 0.4);\n        }\n\n        .btn-group {\n            display: flex;\n            gap: 10px;\n            margin-top: 15px;\n            flex-wrap: wrap;\n        }\n        .btn-group button {\n            flex-grow: 1;\n            min-width: 100px;\n        }\n\n        /* 短链接列表 */\n        .short-link-list, .live-code-list {\n            list-style: none;\n            padding: 0;\n            margin-top: 20px;\n        }\n\n        .link-item {\n            background-color: var(--card-background);\n            border-radius: 12px;\n            margin-bottom: 15px;\n            padding: 15px;\n            box-shadow: 0 4px 10px var(--shadow-light);\n            transition: transform 0.2s ease, box-shadow 0.2s ease;\n        }\n\n        .link-item:hover {\n            transform: translateY(-3px);\n            box-shadow: 0 6px 15px var(--shadow-dark);\n        }\n\n        .link-item h3 {\n            margin-top: 0;\n            margin-bottom: 10px;\n            font-size: 1.1em;\n            color: var(--primary-color);\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n\n        .link-item p {\n            margin: 5px 0;\n            font-size: 0.85em;\n            color: var(--text-dark);\n            word-break: break-all;\n        }\n\n        .link-item .status {\n            font-size: 0.8em;\n            padding: 4px 8px;\n            border-radius: 5px;\n            font-weight: bold;\n            color: white;\n            background-color: var(--warning-color); /* Default */\n        }\n        .link-item .status.ACTIVE { background-color: var(--success-color); }\n        .link-item .status.INVALID { background-color: var(--danger-color); }\n\n        .link-item .actions {\n            margin-top: 15px;\n            display: flex;\n            flex-wrap: wrap;\n            gap: 8px;\n            justify-content: flex-end;\n        }\n\n        .link-item .actions button {\n            padding: 8px 12px;\n            font-size: 0.8em;\n            border-radius: 6px;\n            box-shadow: none;\n            flex-grow: 1;\n            min-width: 70px;\n        }\n        .link-item .actions button:hover {\n            transform: none;\n            box-shadow: none;\n            opacity: 0.8;\n        }\n\n        /* 模态框 */\n        .modal-overlay {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background-color: rgba(0, 0, 0, 0.7);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            z-index: 1000;\n            opacity: 0;\n            visibility: hidden;\n            transition: opacity 0.3s ease, visibility 0.3s ease;\n        }\n\n        .modal-overlay.visible {\n            opacity: 1;\n            visibility: visible;\n        }\n\n        .modal-content {\n            background-color: var(--background-light);\n            padding: 25px;\n            border-radius: 15px;\n            box-shadow: 0 8px 25px var(--shadow-dark);\n            width: 90%;\n            max-width: 400px;\n            transform: translateY(20px);\n            transition: transform 0.3s ease;\n        }\n\n        .modal-overlay.visible .modal-content {\n            transform: translateY(0);\n        }\n\n        .modal-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 20px;\n            border-bottom: 1px solid var(--border-color);\n            padding-bottom: 10px;\n        }\n\n        .modal-header h3 {\n            margin: 0;\n            color: var(--primary-color);\n            font-family: 'Orbitron', sans-serif;\n            font-size: 1.1em;\n        }\n\n        .modal-close-btn {\n            background: none;\n            border: none;\n            color: var(--text-dark);\n            font-size: 1.5em;\n            cursor: pointer;\n            padding: 0;\n            transition: color 0.3s;\n        }\n        .modal-close-btn:hover {\n            color: var(--primary-color);\n        }\n\n        .modal-body {\n            margin-bottom: 20px;\n        }\n\n        .modal-footer {\n            text-align: right;\n        }\n\n        /* 消息提示 */\n        .message {\n            padding: 10px 15px;\n            border-radius: 8px;\n            margin-bottom: 15px;\n            font-size: 0.9em;\n            text-align: center;\n            animation: fadeIn 0.5s ease-out;\n        }\n\n        .message.success {\n            background-color: rgba(76, 175, 80, 0.2);\n            color: var(--success-color);\n            border: 1px solid var(--success-color);\n        }\n\n        .message.error {\n            background-color: rgba(244, 67, 54, 0.2);\n            color: var(--danger-color);\n            border: 1px solid var(--danger-color);\n        }\n\n        /* QR Code 区域 */\n        .qr-code-display {\n            text-align: center;\n            margin-top: 20px;\n        }\n        .qr-code-display img {\n            max-width: 200px;\n            height: auto;\n            border: 5px solid var(--card-background);\n            border-radius: 10px;\n            box-shadow: 0 5px 15px var(--shadow-dark);\n        }\n        .qr-code-display p {\n            margin-top: 10px;\n            font-size: 0.8em;\n            color: var(--text-dark);\n        }\n\n        /* 数据统计 */\n        .stats-table-container {\n            margin-top: 20px;\n            overflow-x: auto; /* Allow horizontal scrolling for table on small screens */\n            background-color: var(--card-background);\n            border-radius: 12px;\n            padding: 15px;\n            box-shadow: 0 4px 10px var(--shadow-light);\n        }\n\n        .stats-table {\n            width: 100%;\n            border-collapse: collapse;\n            font-size: 0.85em;\n            min-width: 300px; /* Ensure table doesn't shrink too much */\n        }\n\n        .stats-table th, .stats-table td {\n            padding: 10px;\n            text-align: left;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .stats-table th {\n            background-color: var(--background-dark);\n            color: var(--primary-color);\n            font-weight: 500;\n        }\n\n        .stats-table tr:last-child td {\n            border-bottom: none;\n        }\n\n        .stats-table tbody tr:nth-child(even) {\n            background-color: rgba(0, 0, 0, 0.1);\n        }\n\n        /* 辅助类 */\n        .hidden {\n            display: none !important;\n        }\n\n        @keyframes fadeIn {\n            from { opacity: 0; }\n            to { opacity: 1; }\n        }\n\n        /* 响应式调整 */\n        @media (max-width: 480px) {\n            .miniapp-container {\n                border-radius: 0;\n                min-height: 100vh;\n                padding: 0;\n            }\n            body {\n                padding: 0;\n                align-items: stretch;\n            }\n            .app-header {\n                border-radius: 0;\n            }\n            .nav-tab-item {\n                font-size: 0.85em;\n            }\n            .link-item .actions {\n                flex-direction: column;\n                gap: 5px;\n            }\n            .link-item .actions button {\n                width: 100%;\n                min-width: unset;\n            }\n            .modal-content {\n                width: 95%;\n                border-radius: 10px;\n            }\n            h1 {\n                font-size: 1.2em;\n            }\n            h2 {\n                font-size: 1.1em;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"miniapp-container\">\n        <header class=\"app-header\">\n            <h1>网盘拉新达人助手</h1>\n            <p>V1.2.5 - 小程序</p>\n        </header>\n\n        <nav class=\"nav-tabs\">\n            <div class=\"nav-tab-item active\" data-tab=\"shortLinkManagement\"><i class=\"fas fa-link\"></i> 短链接</div>\n            <div class=\"nav-tab-item\" data-tab=\"liveCodeManagement\"><i class=\"fas fa-qrcode\"></i> 活码</div>\n            <div class=\"nav-tab-item\" data-tab=\"qrTools\"><i class=\"fas fa-camera\"></i> 二维码工具</div>\n            <div class=\"nav-tab-item\" data-tab=\"dataStatistics\"><i class=\"fas fa-chart-bar\"></i> 数据统计</div>\n        </nav>\n\n        <main class=\"app-content\">\n            <!-- 短链接管理 -->\n            <section id=\"shortLinkManagement\" class=\"content-section active\">\n                <h2>创建短链接</h2>\n                <div id=\"createShortLinkMessage\" class=\"message hidden\"></div>\n                <div class=\"form-group\">\n                    <label for=\"originalUrlInput\">原始网盘链接:</label>\n                    <input type=\"url\" id=\"originalUrlInput\" placeholder=\"输入您的网盘分享链接\" required>\n                </div>\n                <button id=\"createShortLinkBtn\"><i class=\"fas fa-plus-circle\"></i> 生成短链接</button>\n\n                <h2 style=\"margin-top: 30px;\">我的短链接</h2>\n                <ul id=\"shortLinkList\" class=\"short-link-list\">\n                    <!-- 短链接列表将通过JS渲染 -->\n                </ul>\n            </section>\n\n            <!-- 活码管理 -->\n            <section id=\"liveCodeManagement\" class=\"content-section\">\n                <h2>活码生成</h2>\n                <div id=\"createLiveCodeMessage\" class=\"message hidden\"></div>\n                <div class=\"form-group\">\n                    <label for=\"liveCodeInitialUrlInput\">活码初始目标链接:</label>\n                    <input type=\"url\" id=\"liveCodeInitialUrlInput\" placeholder=\"输入活码初始指向的网盘链接\" required>\n                </div>\n                <button id=\"createLiveCodeBtn\"><i class=\"fas fa-magic\"></i> 生成活码</button>\n\n                <h2 style=\"margin-top: 30px;\">我的活码</h2>\n                <ul id=\"liveCodeList\" class=\"live-code-list\">\n                    <!-- 活码列表将通过JS渲染 -->\n                </ul>\n            </section>\n\n            <!-- 二维码工具 -->\n            <section id=\"qrTools\" class=\"content-section\">\n                <h2>二维码生成</h2>\n                <div id=\"generateQrCodeMessage\" class=\"message hidden\"></div>\n                <div class=\"form-group\">\n                    <label for=\"qrContentInput\">生成二维码内容 (链接/文本):</label>\n                    <input type=\"text\" id=\"qrContentInput\" placeholder=\"输入短链接或其他任意内容\">\n                </div>\n                <button id=\"generateQrCodeBtn\"><i class=\"fas fa-qrcode\"></i> 生成二维码</button>\n                <div class=\"qr-code-display hidden\" id=\"qrCodeDisplayArea\">\n                    <img id=\"generatedQrCodeImg\" src=\"\" alt=\"生成的二维码\">\n                    <p>长按保存图片或分享</p>\n                    <button id=\"downloadQrCodeBtn\" class=\"btn-secondary\"><i class=\"fas fa-download\"></i> 下载二维码</button>\n                </div>\n\n                <h2 style=\"margin-top: 30px;\">二维码扫描</h2>\n                <div id=\"scanQrCodeMessage\" class=\"message hidden\"></div>\n                <p style=\"color: var(--text-dark); font-size: 0.9em;\">\n                    在小程序中，此功能将直接调用设备摄像头进行扫描。<br>\n                    在网页演示中，我们模拟扫描结果。\n                </p>\n                <button id=\"simulateScanQrCodeBtn\" class=\"btn-secondary\"><i class=\"fas fa-camera\"></i> 模拟扫描二维码</button>\n                <div id=\"scannedQrCodeResult\" class=\"hidden\" style=\"margin-top: 15px;\">\n                    <p>扫描结果: <strong id=\"scannedContent\"></strong></p>\n                    <div class=\"btn-group\">\n                        <button id=\"openScannedLinkBtn\" class=\"hidden\"><i class=\"fas fa-external-link-alt\"></i> 打开链接</button>\n                        <button id=\"copyScannedContentBtn\" class=\"btn-secondary\"><i class=\"fas fa-copy\"></i> 复制内容</button>\n                    </div>\n                </div>\n            </section>\n\n            <!-- 数据统计 -->\n            <section id=\"dataStatistics\" class=\"content-section\">\n                <h2>访问数据统计</h2>\n                <div id=\"statsMessage\" class=\"message hidden\"></div>\n                <div class=\"form-group\">\n                    <label for=\"statsShortLinkSelect\">选择短链接:</label>\n                    <select id=\"statsShortLinkSelect\">\n                        <!-- 选项将通过JS加载 -->\n                    </select>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"statsStartDate\">开始日期:</label>\n                    <input type=\"date\" id=\"statsStartDate\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"statsEndDate\">结束日期:</label>\n                    <input type=\"date\" id=\"statsEndDate\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"statsDeviceTypeSelect\">筛选设备类型:</label>\n                    <select id=\"statsDeviceTypeSelect\">\n                        <option value=\"ALL\">全部</option>\n                        <option value=\"PC\">PC端</option>\n                        <option value=\"MOBILE\">移动端</option>\n                    </select>\n                </div>\n                <button id=\"queryStatsBtn\"><i class=\"fas fa-search\"></i> 查询数据</button>\n\n                <div id=\"statsResultArea\" class=\"hidden\">\n                    <h3 style=\"color: var(--text-light); margin-top: 30px; font-size: 1em;\">每日访问数据：</h3>\n                    <div class=\"stats-table-container\">\n                        <table class=\"stats-table\">\n                            <thead>\n                                <tr>\n                                    <th>日期</th>\n                                    <th>总访问量</th>\n                                    <th>PC端</th>\n                                    <th>移动端</th>\n                                </tr>\n                            </thead>\n                            <tbody id=\"statsTableBody\">\n                                <!-- 统计数据将通过JS渲染 -->\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </section>\n        </main>\n\n        <!-- 模态框 - 修改短链接 -->\n        <div id=\"modifyShortLinkModal\" class=\"modal-overlay\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h3>修改短链接目标</h3>\n                    <button class=\"modal-close-btn\" data-modal-target=\"modifyShortLinkModal\">&times;</button>\n                </div>\n                <div class=\"modal-body\">\n                    <div id=\"modifyShortLinkMessage\" class=\"message hidden\"></div>\n                    <div class=\"form-group\">\n                        <label for=\"modifyShortCode\">短链接代码:</label>\n                        <input type=\"text\" id=\"modifyShortCode\" readonly>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"modifyOriginalUrl\">新网盘链接:</label>\n                        <input type=\"url\" id=\"modifyOriginalUrl\" placeholder=\"输入新的网盘分享链接\" required>\n                    </div>\n                </div>\n                <div class=\"modal-footer\">\n                    <button class=\"btn-secondary\" data-modal-target=\"modifyShortLinkModal\">取消</button>\n                    <button id=\"saveModifyShortLinkBtn\"><i class=\"fas fa-save\"></i> 保存修改</button>\n                </div>\n            </div>\n        </div>\n\n        <!-- 模态框 - 修改活码目标 -->\n        <div id=\"modifyLiveCodeModal\" class=\"modal-overlay\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h3>修改活码目标链接</h3>\n                    <button class=\"modal-close-btn\" data-modal-target=\"modifyLiveCodeModal\">&times;</button>\n                </div>\n                <div class=\"modal-body\">\n                    <div id=\"modifyLiveCodeMessage\" class=\"message hidden\"></div>\n                    <div class=\"form-group\">\n                        <label for=\"modifyLiveCodeKey\">活码识别码:</label>\n                        <input type=\"text\" id=\"modifyLiveCodeKey\" readonly>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"modifyLiveCodeTargetUrl\">新目标链接:</label>\n                        <input type=\"url\" id=\"modifyLiveCodeTargetUrl\" placeholder=\"输入活码新的目标链接\" required>\n                    </div>\n                </div>\n                <div class=\"modal-footer\">\n                    <button class=\"btn-secondary\" data-modal-target=\"modifyLiveCodeModal\">取消</button>\n                    <button id=\"saveModifyLiveCodeBtn\"><i class=\"fas fa-save\"></i> 保存修改</button>\n                </div>\n            </div>\n        </div>\n\n    </div>\n\n    <!-- QR Code Library (qrious, a lightweight option) -->\n    <script src=\"https://unpkg.com/qrious@4.0.2/dist/qrious.min.js\"></script>\n\n    <script>\n        // --- 全局状态与测试数据 ---\n        let shortLinks = [\n            { id: 'sl001', shortCode: 'abc123d', originalUrl: 'https://pan.baidu.com/s/1aB2cD3eF4gH5iJ6kL7mN', fullShortUrl: 'http://localhost:8080/s/abc123d', status: 'ACTIVE', createdAt: '2023-01-15T10:00:00', lastModifiedAt: '2023-01-15T10:00:00' },\n            { id: 'sl002', shortCode: 'xyz987p', originalUrl: 'https://www.aliyundrive.com/s/qWeRtYuI', fullShortUrl: 'http://localhost:8080/s/xyz987p', status: 'INVALID', createdAt: '2023-02-20T14:30:00', lastModifiedAt: '2023-03-01T09:15:00' },\n            { id: 'sl003', shortCode: 'qwe456r', originalUrl: 'https://cloud.189.cn/t/AbCdeFg', fullShortUrl: 'http://localhost:8080/s/qwe456r', status: 'ACTIVE', createdAt: '2023-03-10T11:00:00', lastModifiedAt: '2023-03-10T11:00:00' }\n        ];\n\n        let liveCodes = [\n            { id: 'lc001', liveCodeKey: 'live123', initialUrl: 'https://pan.baidu.com/s/live_target_A', currentTargetUrl: 'https://pan.baidu.com/s/live_target_A', fullLiveCodeUrl: 'http://localhost:8080/live/live123', createdAt: '2023-04-01T08:00:00' },\n            { id: 'lc002', liveCodeKey: 'live456', initialUrl: 'https://www.aliyundrive.com/s/live_target_B', currentTargetUrl: 'https://www.aliyundrive.com/s/live_target_C', fullLiveCodeUrl: 'http://localhost:8080/live/live456', createdAt: '2023-04-10T12:00:00' }\n        ];\n\n        let nextShortLinkId = 1004; // Use a number for IDs for simplicity\n        let nextLiveCodeId = 2003;\n\n        const APP_BASE_URL = 'http://localhost:8080'; // 模拟后端服务的地址\n\n        // --- 辅助函数 ---\n        function showMessage(elementId, type, text) {\n            const messageElement = document.getElementById(elementId);\n            messageElement.textContent = text;\n            messageElement.className = `message ${type}`;\n            messageElement.classList.remove('hidden');\n            setTimeout(() => {\n                messageElement.classList.add('hidden');\n            }, 5000);\n        }\n\n        function generateRandomCode(length = 7) {\n            const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n            let result = '';\n            for (let i = 0; i < length; i++) {\n                result += chars.charAt(Math.floor(Math.random() * chars.length));\n            }\n            return result;\n        }\n\n        function isValidUrl(string) {\n            try {\n                new URL(string);\n                return true;\n            } catch (e) {\n                return false;\n            }\n        }\n\n        function copyToClipboard(text) {\n            navigator.clipboard.writeText(text).then(() => {\n                alert('已复制到剪贴板: ' + text);\n            }).catch(err => {\n                console.error('复制失败:', err);\n                alert('复制失败，请手动复制。');\n            });\n        }\n\n        function openModal(modalId) {\n            document.getElementById(modalId).classList.add('visible');\n        }\n\n        function closeModal(modalId) {\n            document.getElementById(modalId).classList.remove('visible');\n        }\n\n        // --- 页面初始化 ---\n        document.addEventListener('DOMContentLoaded', () => {\n            initTabs();\n            renderShortLinksList();\n            renderLiveCodesList();\n            populateStatsShortLinkSelect();\n            initDatePickers();\n        });\n\n        function initTabs() {\n            const tabItems = document.querySelectorAll('.nav-tab-item');\n            const sections = document.querySelectorAll('.content-section');\n\n            tabItems.forEach(item => {\n                item.addEventListener('click', () => {\n                    tabItems.forEach(i => i.classList.remove('active'));\n                    item.classList.add('active');\n\n                    sections.forEach(sec => sec.classList.remove('active'));\n                    document.getElementById(item.dataset.tab).classList.add('active');\n                });\n            });\n\n            // Close modal functionality\n            document.querySelectorAll('.modal-close-btn').forEach(btn => {\n                btn.addEventListener('click', (event) => {\n                    closeModal(event.target.dataset.modalTarget);\n                });\n            });\n            document.querySelectorAll('.modal-overlay').forEach(overlay => {\n                overlay.addEventListener('click', (event) => {\n                    if (event.target === overlay) {\n                        closeModal(overlay.id);\n                    }\n                });\n            });\n        }\n\n        function initDatePickers() {\n            const today = new Date();\n            const year = today.getFullYear();\n            const month = String(today.getMonth() + 1).padStart(2, '0');\n            const day = String(today.getDate()).padStart(2, '0');\n            const formattedDate = `${year}-${month}-${day}`;\n\n            document.getElementById('statsEndDate').value = formattedDate;\n\n            const sevenDaysAgo = new Date(today);\n            sevenDaysAgo.setDate(today.getDate() - 7);\n            const sevenYear = sevenDaysAgo.getFullYear();\n            const sevenMonth = String(sevenDaysAgo.getMonth() + 1).padStart(2, '0');\n            const sevenDay = String(sevenDaysAgo.getDate()).padStart(2, '0');\n            const formattedSevenDaysAgo = `${sevenYear}-${sevenMonth}-${sevenDay}`;\n\n            document.getElementById('statsStartDate').value = formattedSevenDaysAgo;\n        }\n\n        // --- 短链接管理功能 ---\n        const originalUrlInput = document.getElementById('originalUrlInput');\n        const createShortLinkBtn = document.getElementById('createShortLinkBtn');\n        const shortLinkListElement = document.getElementById('shortLinkList');\n\n        createShortLinkBtn.addEventListener('click', async () => {\n            const originalUrl = originalUrlInput.value.trim();\n            if (!originalUrl) {\n                showMessage('createShortLinkMessage', 'error', '请输入原始网盘链接！');\n                return;\n            }\n            if (!isValidUrl(originalUrl)) {\n                showMessage('createShortLinkMessage', 'error', '请输入有效的URL格式！');\n                return;\n            }\n\n            // 模拟API调用\n            showMessage('createShortLinkMessage', 'success', '正在生成短链接...');\n            await new Promise(resolve => setTimeout(resolve, 800)); // 模拟网络延迟\n\n            const newShortCode = generateRandomCode();\n            const newShortLink = {\n                id: 'sl' + nextShortLinkId++,\n                shortCode: newShortCode,\n                originalUrl: originalUrl,\n                fullShortUrl: `${APP_BASE_URL}/s/${newShortCode}`,\n                status: 'ACTIVE',\n                createdAt: new Date().toISOString(),\n                lastModifiedAt: new Date().toISOString()\n            };\n            shortLinks.unshift(newShortLink); // 添加到列表开头\n            renderShortLinksList();\n            populateStatsShortLinkSelect();\n            originalUrlInput.value = '';\n            showMessage('createShortLinkMessage', 'success', `短链接生成成功: ${newShortLink.fullShortUrl}`);\n        });\n\n        function renderShortLinksList() {\n            shortLinkListElement.innerHTML = '';\n            if (shortLinks.length === 0) {\n                shortLinkListElement.innerHTML = '<p style=\"text-align: center; color: var(--text-dark); margin-top: 20px;\">暂无短链接，快去创建一个吧！</p>';\n                return;\n            }\n\n            shortLinks.forEach(link => {\n                const li = document.createElement('li');\n                li.className = 'link-item';\n                li.innerHTML = `\n                    <h3>\n                        <span>短链接: ${link.shortCode}</span>\n                        <span class=\"status ${link.status}\">${link.status === 'ACTIVE' ? '有效' : '失效'}</span>\n                    </h3>\n                    <p><strong>短链接:</strong> <a href=\"${link.fullShortUrl}\" target=\"_blank\" style=\"color: var(--primary-color); text-decoration: none;\">${link.fullShortUrl}</a></p>\n                    <p><strong>原始链接:</strong> ${link.originalUrl}</p>\n                    <p><strong>创建时间:</strong> ${new Date(link.createdAt).toLocaleString()}</p>\n                    <div class=\"actions\">\n                        <button class=\"copy-short-url-btn btn-secondary\" data-short-url=\"${link.fullShortUrl}\"><i class=\"fas fa-copy\"></i> 复制</button>\n                        <button class=\"modify-link-btn\" data-id=\"${link.id}\"><i class=\"fas fa-edit\"></i> 修改</button>\n                        <button class=\"view-stats-btn btn-secondary\" data-id=\"${link.id}\"><i class=\"fas fa-chart-line\"></i> 统计</button>\n                        <button class=\"generate-qr-btn\" data-url=\"${link.fullShortUrl}\"><i class=\"fas fa-qrcode\"></i> 二维码</button>\n                    </div>\n                `;\n                shortLinkListElement.appendChild(li);\n            });\n\n            // 绑定事件监听器\n            document.querySelectorAll('.copy-short-url-btn').forEach(btn => {\n                btn.addEventListener('click', (event) => {\n                    copyToClipboard(event.currentTarget.dataset.shortUrl);\n                });\n            });\n            document.querySelectorAll('.modify-link-btn').forEach(btn => {\n                btn.addEventListener('click', (event) => {\n                    openModifyShortLinkModal(event.currentTarget.dataset.id);\n                });\n            });\n            document.querySelectorAll('.view-stats-btn').forEach(btn => {\n                btn.addEventListener('click', (event) => {\n                    switchTab('dataStatistics');\n                    document.getElementById('statsShortLinkSelect').value = event.currentTarget.dataset.id;\n                    // Trigger a stats query for the selected link (optional, can be manual click)\n                    // queryStatsBtn.click();\n                });\n            });\n            document.querySelectorAll('.generate-qr-btn').forEach(btn => {\n                btn.addEventListener('click', (event) => {\n                    switchTab('qrTools');\n                    document.getElementById('qrContentInput').value = event.currentTarget.dataset.url;\n                    document.getElementById('generateQrCodeBtn').click(); // Auto-generate QR\n                });\n            });\n        }\n\n        // 修改短链接模态框逻辑\n        const modifyShortLinkModal = document.getElementById('modifyShortLinkModal');\n        const modifyShortCodeInput = document.getElementById('modifyShortCode');\n        const modifyOriginalUrlInput = document.getElementById('modifyOriginalUrl');\n        const saveModifyShortLinkBtn = document.getElementById('saveModifyShortLinkBtn');\n        let currentModifyShortLinkId = null;\n\n        function openModifyShortLinkModal(id) {\n            const link = shortLinks.find(l => l.id === id);\n            if (link) {\n                currentModifyShortLinkId = id;\n                modifyShortCodeInput.value = link.shortCode;\n                modifyOriginalUrlInput.value = link.originalUrl;\n                openModal('modifyShortLinkModal');\n                document.getElementById('modifyShortLinkMessage').classList.add('hidden');\n            }\n        }\n\n        saveModifyShortLinkBtn.addEventListener('click', async () => {\n            const newOriginalUrl = modifyOriginalUrlInput.value.trim();\n            if (!newOriginalUrl) {\n                showMessage('modifyShortLinkMessage', 'error', '请输入新的网盘链接！');\n                return;\n            }\n            if (!isValidUrl(newOriginalUrl)) {\n                showMessage('modifyShortLinkMessage', 'error', '请输入有效的URL格式！');\n                return;\n            }\n\n            showMessage('modifyShortLinkMessage', 'success', '正在保存修改...');\n            await new Promise(resolve => setTimeout(resolve, 800)); // 模拟网络延迟\n\n            const linkIndex = shortLinks.findIndex(l => l.id === currentModifyShortLinkId);\n            if (linkIndex !== -1) {\n                shortLinks[linkIndex].originalUrl = newOriginalUrl;\n                shortLinks[linkIndex].lastModifiedAt = new Date().toISOString();\n                shortLinks[linkIndex].status = 'ACTIVE'; // 假设修改后重新激活\n                renderShortLinksList();\n                showMessage('createShortLinkMessage', 'success', `短链接 ${shortLinks[linkIndex].shortCode} 已更新。`);\n                closeModal('modifyShortLinkModal');\n            } else {\n                showMessage('modifyShortLinkMessage', 'error', '未找到要修改的短链接。');\n            }\n        });\n\n        // --- 活码管理功能 ---\n        const liveCodeInitialUrlInput = document.getElementById('liveCodeInitialUrlInput');\n        const createLiveCodeBtn = document.getElementById('createLiveCodeBtn');\n        const liveCodeListElement = document.getElementById('liveCodeList');\n\n        createLiveCodeBtn.addEventListener('click', async () => {\n            const initialUrl = liveCodeInitialUrlInput.value.trim();\n            if (!initialUrl) {\n                showMessage('createLiveCodeMessage', 'error', '请输入活码初始目标链接！');\n                return;\n            }\n            if (!isValidUrl(initialUrl)) {\n                showMessage('createLiveCodeMessage', 'error', '请输入有效的URL格式！');\n                return;\n            }\n\n            showMessage('createLiveCodeMessage', 'success', '正在生成活码...');\n            await new Promise(resolve => setTimeout(resolve, 800));\n\n            const newLiveCodeKey = generateRandomCode(6);\n            const newLiveCode = {\n                id: 'lc' + nextLiveCodeId++,\n                liveCodeKey: newLiveCodeKey,\n                initialUrl: initialUrl,\n                currentTargetUrl: initialUrl, // 初始目标与初始链接相同\n                fullLiveCodeUrl: `${APP_BASE_URL}/live/${newLiveCodeKey}`,\n                createdAt: new Date().toISOString()\n            };\n            liveCodes.unshift(newLiveCode);\n            renderLiveCodesList();\n            liveCodeInitialUrlInput.value = '';\n            showMessage('createLiveCodeMessage', 'success', `活码生成成功: ${newLiveCode.fullLiveCodeUrl}`);\n        });\n\n        function renderLiveCodesList() {\n            liveCodeListElement.innerHTML = '';\n            if (liveCodes.length === 0) {\n                liveCodeListElement.innerHTML = '<p style=\"text-align: center; color: var(--text-dark); margin-top: 20px;\">暂无活码，快去创建一个吧！</p>';\n                return;\n            }\n\n            liveCodes.forEach(code => {\n                const li = document.createElement('li');\n                li.className = 'link-item'; // 复用短链接的样式\n                li.innerHTML = `\n                    <h3>\n                        <span>活码: ${code.liveCodeKey}</span>\n                        <span class=\"status ACTIVE\">活码</span>\n                    </h3>\n                    <p><strong>活码地址:</strong> <a href=\"${code.fullLiveCodeUrl}\" target=\"_blank\" style=\"color: var(--primary-color); text-decoration: none;\">${code.fullLiveCodeUrl}</a></p>\n                    <p><strong>当前目标:</strong> ${code.currentTargetUrl}</p>\n                    <p><strong>创建时间:</strong> ${new Date(code.createdAt).toLocaleString()}</p>\n                    <div class=\"actions\">\n                        <button class=\"copy-live-code-url-btn btn-secondary\" data-live-code-url=\"${code.fullLiveCodeUrl}\"><i class=\"fas fa-copy\"></i> 复制</button>\n                        <button class=\"modify-live-code-btn\" data-id=\"${code.id}\"><i class=\"fas fa-edit\"></i> 修改目标</button>\n                        <button class=\"generate-qr-btn\" data-url=\"${code.fullLiveCodeUrl}\"><i class=\"fas fa-qrcode\"></i> 二维码</button>\n                    </div>\n                `;\n                liveCodeListElement.appendChild(li);\n            });\n\n            document.querySelectorAll('.copy-live-code-url-btn').forEach(btn => {\n                btn.addEventListener('click', (event) => {\n                    copyToClipboard(event.currentTarget.dataset.liveCodeUrl);\n                });\n            });\n            document.querySelectorAll('.modify-live-code-btn').forEach(btn => {\n                btn.addEventListener('click', (event) => {\n                    openModifyLiveCodeModal(event.currentTarget.dataset.id);\n                });\n            });\n            // 二维码按钮复用短链接的生成逻辑\n        }\n\n        // 修改活码模态框逻辑\n        const modifyLiveCodeModal = document.getElementById('modifyLiveCodeModal');\n        const modifyLiveCodeKeyInput = document.getElementById('modifyLiveCodeKey');\n        const modifyLiveCodeTargetUrlInput = document.getElementById('modifyLiveCodeTargetUrl');\n        const saveModifyLiveCodeBtn = document.getElementById('saveModifyLiveCodeBtn');\n        let currentModifyLiveCodeId = null;\n\n        function openModifyLiveCodeModal(id) {\n            const code = liveCodes.find(lc => lc.id === id);\n            if (code) {\n                currentModifyLiveCodeId = id;\n                modifyLiveCodeKeyInput.value = code.liveCodeKey;\n                modifyLiveCodeTargetUrlInput.value = code.currentTargetUrl;\n                openModal('modifyLiveCodeModal');\n                document.getElementById('modifyLiveCodeMessage').classList.add('hidden');\n            }\n        }\n\n        saveModifyLiveCodeBtn.addEventListener('click', async () => {\n            const newTargetUrl = modifyLiveCodeTargetUrlInput.value.trim();\n            if (!newTargetUrl) {\n                showMessage('modifyLiveCodeMessage', 'error', '请输入新的目标链接！');\n                return;\n            }\n            if (!isValidUrl(newTargetUrl)) {\n                showMessage('modifyLiveCodeMessage', 'error', '请输入有效的URL格式！');\n                return;\n            }\n\n            showMessage('modifyLiveCodeMessage', 'success', '正在保存活码修改...');\n            await new Promise(resolve => setTimeout(resolve, 800));\n\n            const codeIndex = liveCodes.findIndex(lc => lc.id === currentModifyLiveCodeId);\n            if (codeIndex !== -1) {\n                liveCodes[codeIndex].currentTargetUrl = newTargetUrl;\n                liveCodes[codeIndex].lastModifiedAt = new Date().toISOString(); // 假设有这个字段\n                renderLiveCodesList();\n                showMessage('createLiveCodeMessage', 'success', `活码 ${liveCodes[codeIndex].liveCodeKey} 目标已更新。`);\n                closeModal('modifyLiveCodeModal');\n            } else {\n                showMessage('modifyLiveCodeMessage', 'error', '未找到要修改的活码。');\n            }\n        });\n\n\n        // --- 二维码工具功能 ---\n        const qrContentInput = document.getElementById('qrContentInput');\n        const generateQrCodeBtn = document.getElementById('generateQrCodeBtn');\n        const qrCodeDisplayArea = document.getElementById('qrCodeDisplayArea');\n        const generatedQrCodeImg = document.getElementById('generatedQrCodeImg');\n        const downloadQrCodeBtn = document.getElementById('downloadQrCodeBtn');\n        const simulateScanQrCodeBtn = document.getElementById('simulateScanQrCodeBtn');\n        const scannedQrCodeResult = document.getElementById('scannedQrCodeResult');\n        const scannedContentElement = document.getElementById('scannedContent');\n        const openScannedLinkBtn = document.getElementById('openScannedLinkBtn');\n        const copyScannedContentBtn = document.getElementById('copyScannedContentBtn');\n\n        generateQrCodeBtn.addEventListener('click', () => {\n            const content = qrContentInput.value.trim();\n            if (!content) {\n                showMessage('generateQrCodeMessage', 'error', '请输入要生成二维码的内容！');\n                qrCodeDisplayArea.classList.add('hidden');\n                return;\n            }\n\n            try {\n                // 使用 qrious 库生成二维码\n                const qr = new QRious({\n                    element: generatedQrCodeImg,\n                    value: content,\n                    size: 200, // 设定尺寸\n                    level: 'H' // 纠错级别\n                });\n                qrCodeDisplayArea.classList.remove('hidden');\n                showMessage('generateQrCodeMessage', 'success', '二维码已生成。');\n            } catch (e) {\n                showMessage('generateQrCodeMessage', 'error', '生成二维码失败: ' + e.message);\n                qrCodeDisplayArea.classList.add('hidden');\n            }\n        });\n\n        downloadQrCodeBtn.addEventListener('click', () => {\n            const link = document.createElement('a');\n            link.href = generatedQrCodeImg.src;\n            link.download = 'qrcode.png';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        });\n\n        simulateScanQrCodeBtn.addEventListener('click', async () => {\n            showMessage('scanQrCodeMessage', 'success', '正在模拟扫描...');\n            await new Promise(resolve => setTimeout(resolve, 1500)); // 模拟扫描时间\n\n            const simulatedContent = \"https://pan.baidu.com/s/simulated_scan_result\"; // 模拟扫描到的内容\n            scannedContentElement.textContent = simulatedContent;\n            scannedQrCodeResult.classList.remove('hidden');\n\n            if (isValidUrl(simulatedContent)) {\n                openScannedLinkBtn.classList.remove('hidden');\n                openScannedLinkBtn.onclick = () => window.open(simulatedContent, '_blank');\n            } else {\n                openScannedLinkBtn.classList.add('hidden');\n            }\n            copyScannedContentBtn.onclick = () => copyToClipboard(simulatedContent);\n            showMessage('scanQrCodeMessage', 'success', '扫描完成！');\n        });\n\n        // --- 数据统计功能 ---\n        const statsShortLinkSelect = document.getElementById('statsShortLinkSelect');\n        const statsStartDateInput = document.getElementById('statsStartDate');\n        const statsEndDateInput = document.getElementById('statsEndDate');\n        const statsDeviceTypeSelect = document.getElementById('statsDeviceTypeSelect');\n        const queryStatsBtn = document.getElementById('queryStatsBtn');\n        const statsResultArea = document.getElementById('statsResultArea');\n        const statsTableBody = document.getElementById('statsTableBody');\n\n        function populateStatsShortLinkSelect() {\n            statsShortLinkSelect.innerHTML = '<option value=\"\">请选择一个短链接</option>';\n            shortLinks.forEach(link => {\n                const option = document.createElement('option');\n                option.value = link.id;\n                option.textContent = `${link.shortCode} (${link.originalUrl.substring(0, 30)}...)`;\n                statsShortLinkSelect.appendChild(option);\n            });\n        }\n\n        queryStatsBtn.addEventListener('click', async () => {\n            const selectedLinkId = statsShortLinkSelect.value;\n            const startDate = statsStartDateInput.value;\n            const endDate = statsEndDateInput.value;\n            const deviceType = statsDeviceTypeSelect.value;\n\n            if (!selectedLinkId) {\n                showMessage('statsMessage', 'error', '请选择一个短链接！');\n                return;\n            }\n            if (!startDate || !endDate) {\n                showMessage('statsMessage', 'error', '请选择开始和结束日期！');\n                return;\n            }\n            if (new Date(startDate) > new Date(endDate)) {\n                showMessage('statsMessage', 'error', '开始日期不能晚于结束日期！');\n                return;\n            }\n\n            showMessage('statsMessage', 'success', '正在查询数据...');\n            await new Promise(resolve => setTimeout(resolve, 1200)); // 模拟网络延迟\n\n            // 模拟数据生成\n            const simulatedStats = generateSimulatedStats(selectedLinkId, startDate, endDate, deviceType);\n            renderStatsTable(simulatedStats);\n            statsResultArea.classList.remove('hidden');\n            showMessage('statsMessage', 'success', '数据查询成功！');\n        });\n\n        function generateSimulatedStats(linkId, startDateStr, endDateStr, deviceTypeFilter) {\n            const stats = [];\n            const startDate = new Date(startDateStr);\n            const endDate = new Date(endDateStr);\n\n            for (let d = startDate; d <= endDate; d.setDate(d.getDate() + 1)) {\n                const dateString = d.toISOString().split('T')[0];\n                let pcCount = Math.floor(Math.random() * 50);\n                let mobileCount = Math.floor(Math.random() * 100);\n                let totalCount = pcCount + mobileCount;\n\n                if (deviceTypeFilter === 'PC') {\n                    mobileCount = 0;\n                    totalCount = pcCount;\n                } else if (deviceTypeFilter === 'MOBILE') {\n                    pcCount = 0;\n                    totalCount = mobileCount;\n                } else if (deviceTypeFilter === 'ALL' && Math.random() < 0.2) { // Simulate some days with no data\n                    pcCount = 0;\n                    mobileCount = 0;\n                    totalCount = 0;\n                }\n\n                stats.push({\n                    date: dateString,\n                    totalAccesses: totalCount,\n                    pcAccesses: pcCount,\n                    mobileAccesses: mobileCount\n                });\n            }\n            return stats;\n        }\n\n        function renderStatsTable(stats) {\n            statsTableBody.innerHTML = '';\n            if (stats.length === 0) {\n                statsTableBody.innerHTML = '<tr><td colspan=\"4\" style=\"text-align: center; color: var(--text-dark);\">暂无访问数据。</td></tr>';\n                return;\n            }\n\n            stats.forEach(data => {\n                const tr = document.createElement('tr');\n                tr.innerHTML = `\n                    <td>${data.date}</td>\n                    <td>${data.totalAccesses}</td>\n                    <td>${data.pcAccesses}</td>\n                    <td>${data.mobileAccesses}</td>\n                `;\n                statsTableBody.appendChild(tr);\n            });\n        }\n\n        // --- 定时链接有效性检测 (模拟) ---\n        // 在实际小程序中，这会是后端服务的功能。前端只展示状态。\n        // 这里只是模拟前端定时更新状态以演示功能。\n        setInterval(() => {\n            shortLinks.forEach(link => {\n                if (Math.random() < 0.1 && link.status === 'ACTIVE') { // 10% 几率变为失效\n                    link.status = 'INVALID';\n                    link.lastModifiedAt = new Date().toISOString();\n                    // console.log(`模拟: 短链接 ${link.shortCode} 已失效。`);\n                    // showMessage('createShortLinkMessage', 'warning', `短链接 ${link.shortCode} 已失效。`);\n                } else if (Math.random() < 0.05 && link.status === 'INVALID') { // 5% 几率恢复有效\n                    link.status = 'ACTIVE';\n                    link.lastModifiedAt = new Date().toISOString();\n                    // console.log(`模拟: 短链接 ${link.shortCode} 已恢复有效。`);\n                    // showMessage('createShortLinkMessage', 'success', `短链接 ${link.shortCode} 已恢复有效。`);\n                }\n            });\n            renderShortLinksList(); // 重新渲染列表以显示最新状态\n        }, 30000); // 每30秒模拟检测一次\n    </script>\n</body>\n</html>\n"
	// 创建上下文
	ctx, cancel := chromedp.NewContext(context.Background())
	defer cancel()

	var buf []byte
	err := chromedp.Run(ctx,
		// 设置视口
		chromedp.EmulateViewport(430, 930),
		// 设置内容
		chromedp.Navigate("data:text/html;charset=utf-8;base64,"+
			base64.StdEncoding.EncodeToString([]byte(htmlContent))),
		// 等待页面加载完成
		chromedp.WaitReady("body"),
		// 等待 JavaScript 执行
		chromedp.Sleep(2*time.Second),
		// 截图
		chromedp.CaptureScreenshot(&buf),
	)
	if err != nil {
		log.Fatal(err)
	}

	// 保存截图到文件
	err = ioutil.WriteFile("screenshot.png", buf, 0644)
	if err != nil {
		log.Fatal(err)
	}

	log.Println("截图已保存为 screenshot.png")
}

func HTMLToScreenshot2(t *testing.T) {
	htmlContent := `<!DOCTYPE html>
	<html>
	<head>
	   <title>测试页面</title>
	   <style>
	       body { font-family: Arial, sans-serif; padding: 20px; }
	       .container { max-width: 600px; margin: 0 auto; }
	       .header { background: #f0f0f0; padding: 20px; text-align: center; }
	       .content { padding: 20px; border: 1px solid #ddd; margin-top: 20px; }
	   </style>
	</head>
	<body>
	   <div class="container">
	       <div class="header">
	           <h1>Hello, World!</h1>
	           <p>这是一个测试页面</p>
	       </div>
	       <div class="content">
	           <p>当前时间: <span id="time"></span></p>
	           <ul>
	               <li>项目 1</li>
	               <li>项目 2</li>
	               <li>项目 3</li>
	           </ul>
	       </div>
	   </div>
	   <script>
	       document.getElementById('time').textContent = new Date().toLocaleString();
	   </script>
	</body>
	</html>`
	outputPath := "screenshot.png"

	// 创建上下文，取消headless模式进行调试
	opts := append(
		chromedp.DefaultExecAllocatorOptions[:],
		chromedp.NoDefaultBrowserCheck, //不检查默认浏览器
		chromedp.Flag("headless", true),
		chromedp.Flag("blink-settings", "imagesEnabled=true"), //开启图像界面,重点是开启这个
		chromedp.Flag("ignore-certificate-errors", true),      //忽略错误
		chromedp.Flag("disable-web-security", true),           //禁用网络安全标志
		chromedp.Flag("disable-extensions", true),             //开启插件支持
		chromedp.Flag("disable-default-apps", true),
		chromedp.WindowSize(1920, 1080),    // 设置浏览器分辨率（窗口大小）
		chromedp.Flag("disable-gpu", true), //开启gpu渲染
		chromedp.Flag("hide-scrollbars", true),
		chromedp.Flag("mute-audio", true),
		chromedp.Flag("no-sandbox", true),
		chromedp.Flag("no-default-browser-check", true),
		chromedp.NoFirstRun, //设置网站不是首次运行
		chromedp.UserAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36"), //设置UserAgent
	)

	allocCtx, cancel := chromedp.NewExecAllocator(context.Background(), opts...)
	defer cancel()

	ctx, cancel := chromedp.NewContext(allocCtx)
	defer cancel()

	ctx, cancel = context.WithTimeout(ctx, 30*time.Second)
	defer cancel()

	var buf []byte
	// capture entire browser viewport, returning png with quality=90
	if err := chromedp.Run(ctx, fullScreenshot(htmlContent, 100, &buf)); err != nil {
		log.Fatal(err)
	}

	//// 执行任务
	//err := chromedp.Run(ctx,
	//	// 设置视口大小
	//	chromedp.EmulateViewport(1920, 1080),
	//
	//	// 导航到HTML内容
	//	chromedp.Navigate("data:text/html;charset=utf-8,"+htmlContent),
	//
	//	// 等待页面完全加载
	//	chromedp.WaitReady("body", chromedp.ByQuery),
	//
	//	// 等待JavaScript执行完成
	//	chromedp.Sleep(3*time.Second),
	//
	//	// 检查页面内容
	//	chromedp.ActionFunc(func(ctx context.Context) error {
	//		var bodyHTML string
	//		if err := chromedp.Evaluate(`document.body.innerHTML`, &bodyHTML).Do(ctx); err != nil {
	//			return err
	//		}
	//		log.Printf("Body内容长度: %d", len(bodyHTML))
	//
	//		var hasVisibleContent bool
	//		if err := chromedp.Evaluate(`
	//            document.body.innerText.length > 0 ||
	//            document.querySelector('svg') !== null ||
	//            document.querySelector('canvas') !== null ||
	//            document.querySelector('img') !== null
	//        `, &hasVisibleContent).Do(ctx); err != nil {
	//			return err
	//		}
	//
	//		if !hasVisibleContent {
	//			return fmt.Errorf("页面没有可见内容")
	//		}
	//
	//		log.Println("页面有可见内容，继续截图...")
	//		return nil
	//	}),
	//
	//	chromedp.FullScreenshot(&buf, 90),
	//)
	//if err != nil {
	//	log.Fatal(err)
	//}
	//
	//if len(buf) == 0 {
	//	log.Fatal("截图数据为空")
	//}
	//
	// 保存截图
	if err := ioutil.WriteFile(outputPath, buf, 0644); err != nil {
		log.Fatal(err)
	}
}

// 获取整个浏览器窗口的截图（全屏）
// 这将模拟浏览器操作设置。
func fullScreenshot(htmlContent string, quality int64, res *[]byte) chromedp.Tasks {
	return chromedp.Tasks{
		chromedp.Navigate("data:text/html;charset=utf-8;base64," +
			base64.StdEncoding.EncodeToString([]byte(htmlContent))),
		//chromedp.WaitVisible("style"),
		chromedp.Sleep(10 * time.Second),
		//chromedp.OuterHTML(`document.querySelector("body")`, &htmlContent, chromedp.ByJSPath),
		chromedp.ActionFunc(func(ctx context.Context) error {
			// 得到布局页面
			_, _, _, _, _, contentSize, err := page.GetLayoutMetrics().Do(ctx)
			if err != nil {
				return err
			}

			width, height := int64(math.Ceil(contentSize.Width)), int64(math.Ceil(contentSize.Height))

			// 浏览器视窗设置模拟
			err = emulation.SetDeviceMetricsOverride(width, height, 1, false).
				WithScreenOrientation(&emulation.ScreenOrientation{
					Type:  emulation.OrientationTypePortraitPrimary,
					Angle: 0,
				}).
				Do(ctx)
			if err != nil {
				return err
			}

			// 捕捉屏幕截图
			*res, err = page.CaptureScreenshot().
				WithQuality(quality).
				WithClip(&page.Viewport{
					X:      contentSize.X,
					Y:      contentSize.Y,
					Width:  contentSize.Width,
					Height: contentSize.Height,
					Scale:  1,
				}).Do(ctx)
			if err != nil {
				return err
			}
			return nil
		}),
	}
}
